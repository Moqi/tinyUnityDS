   1              		.cpu arm9
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Camera.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.data
  17              		.align	2
  20              	_ZL6glGlob:
  21 0000 00000000 		.word	glGlobalData
  22              		.text
  23              		.align	2
  25              	glBegin:
  26              	.LFB100:
  27              		.file 1 "/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h"
   1:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*---------------------------------------------------------------------------------
   2:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
   3:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	videoGL.h -- Video API vaguely similar to OpenGL
   4:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
   5:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	Copyright (C) 2005
   6:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		Michael Noland (joat)
   7:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		Jason Rogers (dovoto)
   8:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		Dave Murphy (WinterMute)
   9:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  10:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	This software is provided 'as-is', without any express or implied
  11:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	warranty.  In no event will the authors be held liable for any
  12:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	damages arising from the use of this software.
  13:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  14:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	Permission is granted to anyone to use this software for any
  15:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	purpose, including commercial applications, and to alter it and
  16:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	redistribute it freely, subject to the following restrictions:
  17:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  18:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	1.	The origin of this software must not be misrepresented; you
  19:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		must not claim that you wrote the original software. If you use
  20:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		this software in a product, an acknowledgment in the product
  21:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		documentation would be appreciated but is not required.
  22:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  23:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	2.	Altered source versions must be plainly marked as such, and
  24:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		must not be misrepresented as being the original software.
  25:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  26:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	3.	This notice may not be removed or altered from any source
  27:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		distribution.
  28:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  29:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  30:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** ---------------------------------------------------------------------------------*/
  31:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \file videoGL.h
  32:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	\brief openGL (ish) interface to DS 3D hardware.
  33:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** */
  34:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  35:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  36:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  37:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #ifndef VIDEOGL_ARM9_INCLUDE
  38:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define VIDEOGL_ARM9_INCLUDE
  39:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //---------------------------------------------------------------------------------
  40:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  41:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/dma.h"
  42:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/ndstypes.h"
  43:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/arm9/sassert.h"
  44:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/arm9/video.h"
  45:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/arm9/cache.h"
  46:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/arm9/trig_lut.h"
  47:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/arm9/math.h"
  48:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #include "nds/arm9/dynamicArray.h"
  49:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  50:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  51:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // for some reason doxygen doesn't like "static inline" but is fine with "GL_STATIC_INL"
  52:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define GL_STATIC_INL static inline
  53:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //...I didn't had any problems, so maybe the bug is already solved in doxygen...
  54:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  55:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  56:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  57:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #ifndef ARM9
  58:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #error 3D hardware is only available from the ARM9
  59:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #endif
  60:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  61:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //---------------------------------------------------------------------------------
  62:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  63:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*---------------------------------------------------------------------------------
  64:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	lut resolution for trig functions
  65:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	(must be power of two and must be the same as LUT resolution)
  66:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	in other words dont change unless you also change your LUTs
  67:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** ---------------------------------------------------------------------------------*/
  68:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define LUT_SIZE (1<<15)
  69:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define LUT_MASK ((1<<15) - 1)
  70:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  71:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** ////////////////////////////////////////////////////////////
  72:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // Misc. constants
  73:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** ////////////////////////////////////////////////////////////
  74:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  75:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define MAX_TEXTURES 2048  //this should be enough ! but feel free to change
  76:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  77:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  78:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //////////////////////////////////////////////////////////////////////
  79:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // Fixed point / floating point / integer conversion macros
  80:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //////////////////////////////////////////////////////////////////////
  81:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  82:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef uint16 fixed12d3; /*!< \brief Used for depth (glClearDepth, glCutoffDepth) */
  83:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  84:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  85:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define intto12d3(n)    ((n) << 3) /*!< \brief convert int to fixed12d3 */
  86:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define floatto12d3(n)  ((fixed12d3)((n) * (1 << 3))) /*!< \brief convert float to fixed12d3 */
  87:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define GL_MAX_DEPTH      0x7FFF /*!< \brief the maximum value for type fixed12d3 */
  88:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  89:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //////////////////////////////////////////////////////////////////////
  90:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  91:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef short t16;        /*!< \brief text coordinate 12.4 fixed point */
  92:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define f32tot16(n)          ((t16)(n >> 8)) /*!< \brief convert f32 to t16 */
  93:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define inttot16(n)          ((n) << 4) /*!< \brief convert int to t16 */
  94:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define t16toint(n)          ((n) >> 4) /*!< \brief convert t16 to int */
  95:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define floattot16(n)        ((t16)((n) * (1 << 4))) /*!< \brief convert float to t16 */
  96:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define TEXTURE_PACK(u,v)    (((u) & 0xFFFF) | ((v) << 16)) /*!< \brief Pack 2 t16 texture coordina
  97:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
  98:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef short int v16;       /*!< \brief vertex 4.12 fixed format */
  99:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define inttov16(n)          ((n) << 12) /*!< \brief convert int to v16 */
 100:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define f32tov16(n)          (n) /*!< \brief f32 to v16 */
 101:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define v16toint(n)          ((n) >> 12) /*!< \brief convert v16 to int */
 102:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define floattov16(n)        ((v16)((n) * (1 << 12))) /*!< \brief convert float to v16 */
 103:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define VERTEX_PACK(x,y)     (u32)(((x) & 0xFFFF) | ((y) << 16)) /*!< \brief Pack to v16 values int
 104:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 105:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef short int v10;       /*!< \brief normal .10 fixed point, NOT USED FOR 10bit VERTEXES!!!*/
 106:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define inttov10(n)          ((n) << 9) /*!< \brief convert int to v10 */
 107:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define f32tov10(n)          ((v10)(n >> 3)) /*!< \brief convert f32 to v10 */
 108:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define v10toint(n)          ((n) >> 9) /*!< \brief convert v10 to int */
 109:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define floattov10(n)        ((n>.998) ? 0x1FF : ((v10)((n)*(1<<9)))) /*!< \brief convert float to 
 110:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define NORMAL_PACK(x,y,z)   (u32)(((x) & 0x3FF) | (((y) & 0x3FF) << 10) | ((z) << 20)) /*!< \brief
 111:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 112:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //////////////////////////////////////////////////////////////////////
 113:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 114:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef unsigned short rgb; /*!< \brief Holds a color value. 1bit alpha, 5bits red, 5bits green, 5b
 115:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 116:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Holds a Matrix of 3x3 */
 117:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct m3x3 {
 118:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int m[9]; /*!< array that holds matrix */
 119:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } m3x3;
 120:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 121:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Holds a Matrix of 4x4 */
 122:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct m4x4 {
 123:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int m[16]; /*!< array that holds matrix */
 124:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } m4x4;
 125:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 126:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Holds a Matrix of 4x3 */
 127:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct m4x3 {
 128:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int m[12]; /*!< array that holds matrix */
 129:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } m4x3;
 130:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 131:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Holds a Vector<BR>related functions: glScalev(), glTranslatev() */
 132:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct GLvector {
 133:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int x, y, z;
 134:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } GLvector;
 135:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 136:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //////////////////////////////////////////////////////////////////////
 137:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 138:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define GL_FALSE     0
 139:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define GL_TRUE      1
 140:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 141:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums selecting polygon draw mode<BR>
 142:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dpolygondefinitionsbyvertices">GBATEK http://nocash
 143:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glBegin() */
 144:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef enum {
 145:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TRIANGLES      = 0, /*!< draw triangles with each 3 vertices defining a triangle */
 146:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_QUADS          = 1, /*!< draw quads with each 4 vertices defining a quad */
 147:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TRIANGLE_STRIP = 2, /*!< draw triangles with the first triangle defined by 3 vertices, then eac
 148:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_QUAD_STRIP     = 3, /*!< draw quads with the first quad being defined by 4 vertices, then each 
 149:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TRIANGLE       = 0, /*!< same as GL_TRIANGLES, old non-OpenGL version */
 150:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_QUAD           = 1  /*!< same as GL_QUADS, old non-OpenGL version */
 151:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } GL_GLBEGIN_ENUM;
 152:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 153:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums selecting matrix mode<BR>
 154:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixloadmultiply">GBATEK http://nocash.emubase.d
 155:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glMatrixMode() */
 156:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef enum {
 157:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_PROJECTION     = 0, /*!< used to set the Projection Matrix */
 158:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_POSITION       = 1, /*!< used to set the Position Matrix */
 159:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_MODELVIEW      = 2, /*!< used to set the Modelview Matrix */
 160:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE        = 3  /*!< used to set the Texture Matrix */
 161:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } GL_MATRIX_MODE_ENUM;
 162:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 163:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for setting up materials<BR>
 164:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dpolygonlightparameters">GBATEK http://nocash.emuba
 165:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glMaterialf() */
 166:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef enum {
 167:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_AMBIENT             = 0x01, /*!< sets the ambient color for the material. The color when the no
 168:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_DIFFUSE             = 0x02, /*!< sets the diffuse color for the material. The color when the no
 169:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_AMBIENT_AND_DIFFUSE = 0x03, /*!< sets the set ambient and diffuse colors for the material; just
 170:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_SPECULAR            = 0x04, /*!< sets the specular color for the material. The glossy(highlight
 171:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_SHININESS           = 0x08, /*!< sets the shininess color for the material. The color that shin
 172:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_EMISSION            = 0x10  /*!< sets the emission color for the material. bright color that is
 173:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } GL_MATERIALS_ENUM;
 174:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 175:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for setting how polygons will be displayed<BR>
 176:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dpolygonattributes">GBATEK http://nocash.emubase.de
 177:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glPolyFmt(), glInit(), POLY_ALPHA(), POLY_ID() */
 178:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** enum GL_POLY_FORMAT_ENUM {
 179:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_FORMAT_LIGHT0   = (1<<0), /*!< enable light number 0 */
 180:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_FORMAT_LIGHT1   = (1<<1), /*!< enable light number 1 */
 181:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_FORMAT_LIGHT2   = (1<<2), /*!< enable light number 2 */
 182:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_FORMAT_LIGHT3   = (1<<3), /*!< enable light number 3 */
 183:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_MODULATION      = (0<<4), /*!< enable modulation shading mode; this is the default */
 184:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_DECAL           = (1<<4), /*!< enable decal shading */
 185:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_TOON_HIGHLIGHT  = (2<<4), /*!< enable toon/highlight shading mode */
 186:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_SHADOW          = (3<<4), /*!< enable shadow shading */
 187:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_CULL_FRONT      = (1<<6), /*!< cull front polygons */
 188:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_CULL_BACK       = (2<<6), /*!< cull rear polygons */
 189:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_CULL_NONE       = (3<<6), /*!< don't cull any polygons */
 190:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	POLY_FOG             = (1<<15) /*!< enable/disable fog for this polygon */
 191:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** };
 192:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 193:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for size of a texture, specify one for horizontal and one for vertical
 194:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glTexImage2d(), glTexParameter() */
 195:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** enum GL_TEXTURE_SIZE_ENUM {
 196:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_8    = 0, /*!< 8 texels */
 197:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_16   = 1, /*!< 16 texels */
 198:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_32   = 2, /*!< 32 texels */
 199:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_64   = 3, /*!< 64 texels */
 200:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_128  = 4, /*!< 128 texels */
 201:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_256  = 5, /*!< 256 texels */
 202:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_512  = 6, /*!< 512 texels */
 203:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXTURE_SIZE_1024 = 7  /*!< 1024 texels */
 204:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** };
 205:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 206:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for texture parameters, such as texture wrapping and texture coord stuff<BR>
 207:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dtextureattributes">GBATEK http://nocash.emubase.de
 208:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glTexImage2d(), glTexParameter() */
 209:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef enum  {
 210:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE_WRAP_S = (1 << 16), /*!< wrap(repeat) texture on S axis */
 211:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE_WRAP_T = (1 << 17), /*!< wrap(repeat) texture on T axis */
 212:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE_FLIP_S = (1 << 18), /*!< flip texture on S axis when wrapping */
 213:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE_FLIP_T = (1 << 19), /*!< flip texture on T axis when wrapping */
 214:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE_COLOR0_TRANSPARENT = (1<<29), /*!< interpret color 0 as clear, same as old GL_TEXTURE_A
 215:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXGEN_OFF      = (0<<30), /*!< use unmodified texcoord */
 216:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXGEN_TEXCOORD = (1<<30), /*!< multiply texcoords by the texture-matrix */
 217:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXGEN_NORMAL   = (2<<30), /*!< set texcoords equal to normal * texture-matrix, used for spherical
 218:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	TEXGEN_POSITION = (3<<30)  /*!< set texcoords equal to vertex * texture-matrix */
 219:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }GL_TEXTURE_PARAM_ENUM;
 220:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 221:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for texture formats<BR>
 222:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dtextureformats">GBATEK http://nocash.emubase.de/gb
 223:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glTexImage2d(), glTexParameter() */
 224:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef enum {
 225:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_NOTEXTURE  = 0, /*!< no texture is used - useful for making palettes */
 226:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGB32_A3   = 1, /*!< 32 color palette, 3 bits of alpha */
 227:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGB4       = 2, /*!< 4 color palette */
 228:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGB16      = 3, /*!< 16 color palette */
 229:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGB256     = 4, /*!< 256 color palette */
 230:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_COMPRESSED = 5, /*!< compressed texture */
 231:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGB8_A5    = 6, /*!< 8 color palette, 5 bits of alpha */
 232:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGBA       = 7, /*!< 15 bit direct color, 1 bit of alpha */
 233:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_RGB        = 8  /*!< 15 bit direct color, manually sets alpha bit to 1 */
 234:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } GL_TEXTURE_TYPE_ENUM;
 235:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 236:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for texture palette data retrieval
 237:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glGetColorTableParameterEXT() */
 238:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** enum GL_TEXTURE_PALETTE_PARAM_ENUM {
 239:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_COLOR_TABLE_FORMAT_EXT	= 0, /*!< Retrieve the palette address in memory */
 240:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_COLOR_TABLE_WIDTH_EXT	= 1  /*!< Retrieve the size of the palette */
 241:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** };
 242:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 243:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief 3D Display Control Register Enums<BR>
 244:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3ddisplaycontrol">GBATEK http://nocash.emubase.de/gb
 245:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glEnable(), glDisable(), glInit() */
 246:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** enum DISP3DCNT_ENUM {
 247:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TEXTURE_2D      = (1<<0),  /*!< enable/disable textures on the geometry engine */
 248:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TOON_HIGHLIGHT  = (1<<1),  /*!< enable = Highlight shading; disable = Toon shading */
 249:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_ALPHA_TEST      = (1<<2),  /*!< whether to use the alpha threshold set in glAlphaFunc() */
 250:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_BLEND           = (1<<3),  /*!< enable/disable alpha blending */
 251:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_ANTIALIAS       = (1<<4),  /*!< nable/disable edge antialiasing; polygons must have different p
 252:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_OUTLINE         = (1<<5),  /*!< enable/disable edge coloring; the high 3bits of the polygon ID 
 253:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_FOG_ONLY_ALPHA  = (1<<6),  /*!< enable = fade into background?; disable = don't fade? */
 254:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_FOG             = (1<<7),  /*!< enables/disables fog */
 255:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_COLOR_UNDERFLOW = (1<<12), /*!< enable = color buffer underflow, setting resets overflow flag; 
 256:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_POLY_OVERFLOW   = (1<<13), /*!< enable = polygon/vertex buffer overflow, setting resets overflo
 257:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_CLEAR_BMP       = (1<<14)  /*!< rear/clear plane is in BMP mode; disable = rear/color plane is 
 258:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** };
 259:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 260:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for reading stuff from the geometry engine<BR>
 261:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3diomap">http://nocash.emubase.de/gbatek.htm#ds3diom
 262:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glGetInt(), glGetFixed()*/
 263:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef enum {
 264:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_VERTEX_RAM_COUNT,    /*!< returns a count of vertexes currently stored in hardware vertex r
 265:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_POLYGON_RAM_COUNT,   /*!< returns a count of polygons currently stored in hardware polygon 
 266:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_MATRIX_VECTOR,		/*!< returns the current 3x3 directional vector matrix. Use glGetFixed() to
 267:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_MATRIX_POSITION,     /*!< returns the current 4x4 position matrix. Use glGetFixed() to retr
 268:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_MATRIX_PROJECTION,   /*!< returns the current 4x4 projection matrix. Use glGetFixed() to re
 269:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_MATRIX_CLIP,			/*!< returns the current 4x4 clip matrix. Use glGetFixed() to retrieve */
 270:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_TEXTURE_WIDTH,       /*!< returns the width of the currently bound texture. Use glGetInt() 
 271:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_GET_TEXTURE_HEIGHT       /*!< returns the height of the currently bound texture. Use glGetInt()
 272:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } GL_GET_ENUM;
 273:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 274:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 275:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Enums for glFlush()<BR>
 276:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3ddisplaycontrol">GBATEK http://nocash.emubase.de/gb
 277:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** related functions: glEnable(), glDisable(), glInit() */
 278:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** enum GLFLUSH_ENUM {
 279:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_TRANS_MANUALSORT = (1<<0), /*!< enable manual sorting of translucent polygons, otherwise uses Y
 280:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_WBUFFERING       = (1<<1)  /*!< enable W depth buffering of vertices, otherwise uses Z depth bu
 281:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** };
 282:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 283:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 284:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*-----------------------------------------
 285:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** Structures specific to allocating and
 286:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** deallocating video RAM in videoGL
 287:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** -----------------------------------------*/
 288:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 289:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 290:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct s_SingleBlock {
 291:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 indexOut;
 292:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint8 *AddrSet;
 293:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	struct s_SingleBlock *node[ 4 ]; // 0-1 ~ prev/next memory block, 2-3 ~ prev/next empty/alloc bloc
 294:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 blockSize;
 295:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } s_SingleBlock;
 296:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 297:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct s_vramBlock {
 298:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint8 *startAddr, *endAddr;
 299:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	struct s_SingleBlock *firstBlock;
 300:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	struct s_SingleBlock *firstEmpty;
 301:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	struct s_SingleBlock *firstAlloc;
 302:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 303:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	struct s_SingleBlock *lastExamined;
 304:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint8 *lastExaminedAddr;
 305:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 lastExaminedSize;
 306:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 307:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DynamicArray blockPtrs;
 308:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DynamicArray deallocBlocks;
 309:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 310:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 blockCount;
 311:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 deallocCount;
 312:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } s_vramBlock;
 313:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 314:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct gl_texture_data {
 315:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	void* vramAddr;			// Address to the texture loaded into VRAM
 316:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 texIndex;		// The index in the Memory Block
 317:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 texIndexExt;		// The secondary index in the Memory block (only for GL_COMPRESSED textures)
 318:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int palIndex;			// The palette index
 319:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 texFormat;		// Specifications of how the texture is displayed
 320:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 texSize;			// The size (in blocks) of the texture
 321:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } gl_texture_data;
 322:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 323:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct gl_palette_data {
 324:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	void* vramAddr;			// Address to the palette loaded into VRAM
 325:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 palIndex;		// The index in the Memory Block
 326:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint16 addr;			// The offset address for texture palettes in VRAM
 327:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint16 palSize;			// The length of the palette
 328:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 connectCount;	// The number of textures currently using this palette
 329:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } gl_palette_data;
 330:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 331:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 332:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 333:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*---------------------------------------------------------------------------------
 334:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** This struct hold hidden globals for videoGL. The structure is initialized in the
 335:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** .c file and returned by glGetGlobals() so that it can be used across compilation
 336:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** units without problem. This is automatically done by glInit() so don't worry too
 337:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** much about it. This is only an issue because of hte mix of inlined/real functions.
 338:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** ---------------------------------------------------------------------------------*/
 339:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 340:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** typedef struct gl_hidden_globals {
 341:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GL_MATRIX_MODE_ENUM matrixMode; // holds the current Matrix Mode
 342:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	s_vramBlock *vramBlocks[ 2 ];		// Two classe instances, one for textures, and one for palettes
 343:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int vramLock[ 2 ];				// Holds the current lock state of the VRAM banks
 344:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 345:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// texture globals
 346:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DynamicArray texturePtrs;		// Pointers to each individual texture
 347:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DynamicArray palettePtrs;		// Pointers to each individual palette
 348:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 349:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DynamicArray deallocTex;		// Preserves deleted texture names for later use with glGenTextures
 350:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DynamicArray deallocPal;		// Preserves deleted palette names
 351:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 deallocTexSize;			// Preserved number of deleted texture names
 352:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint32 deallocPalSize;			// Preserved number of deleted palette names
 353:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 354:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int activeTexture;				// The current active texture name
 355:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int activePalette;				// The current active palette name
 356:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int texCount;
 357:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int palCount;
 358:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 359:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// holds the current state of the clear color register
 360:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	u32 clearColor; // state of clear color register
 361:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 362:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	uint8 isActive;					// Has this been called before?
 363:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** } gl_hidden_globals;
 364:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 365:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 366:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // Pointer to global data for videoGL
 367:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** extern gl_hidden_globals glGlobalData;
 368:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 369:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // Pointer to global data for videoGL
 370:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** static gl_hidden_globals* glGlob = &glGlobalData;
 371:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 372:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //---------------------------------------------------------------------------------
 373:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //Fifo commands
 374:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //---------------------------------------------------------------------------------
 375:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 376:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_COMMAND_PACK(c1,c2,c3,c4) (((c4) << 24) | ((c3) << 16) | ((c2) << 8) | (c1)) /*!< \bri
 377:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 378:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define REG2ID(r)				(u8)( ( ((u32)(&(r)))-0x04000400 ) >> 2 ) /*!< \brief converts a GFX command f
 379:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 380:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_NOP				REG2ID(GFX_FIFO) /*!< \brief packed command for nothing, just here to pad your 
 381:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_STATUS				REG2ID(GFX_STATUS) /*!< \brief packed command for geometry engine status reg
 382:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_COLOR				REG2ID(GFX_COLOR) /*!< \brief packed command for vertex color directly<BR><A 
 383:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 384:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_VERTEX16			REG2ID(GFX_VERTEX16) /*!< \brief packed command for a vertex with 3 16bit p
 385:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_VERTEX10			REG2ID(GFX_VERTEX10) /*!< \brief packed command for a vertex with 3 10bit p
 386:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_VERTEX_XY			REG2ID(GFX_VERTEX_XY) /*!< \brief packed command for a vertex with 2 16bit
 387:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_VERTEX_XZ			REG2ID(GFX_VERTEX_XZ) /*!< \brief packed command for a vertex with 2 16bit
 388:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_VERTEX_YZ			REG2ID(GFX_VERTEX_YZ) /*!< \brief packed command for a vertex with 2 16bit
 389:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_TEX_COORD			REG2ID(GFX_TEX_COORD) /*!< \brief packed command for a texture coordinate<
 390:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_TEX_FORMAT			REG2ID(GFX_TEX_FORMAT) /*!< \brief packed command for texture format<BR><
 391:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_PAL_FORMAT			REG2ID(GFX_PAL_FORMAT) /*!< \brief packed command for texture palette att
 392:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 393:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_CLEAR_COLOR		REG2ID(GFX_CLEAR_COLOR) /*!< \brief packed command for clear color of the
 394:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_CLEAR_DEPTH		REG2ID(GFX_CLEAR_DEPTH) /*!< \brief sets depth of the rear plane<BR><A HR
 395:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 396:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_LIGHT_VECTOR		REG2ID(GFX_LIGHT_VECTOR) /*!< \brief packed command for direction of a l
 397:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_LIGHT_COLOR		REG2ID(GFX_LIGHT_COLOR) /*!< \brief packed command for color for a light<
 398:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_NORMAL				REG2ID(GFX_NORMAL) /*!< \brief packed command for normal for following verti
 399:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 400:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_DIFFUSE_AMBIENT	REG2ID(GFX_DIFFUSE_AMBIENT) /*!< \brief packed command for setting dif
 401:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_SPECULAR_EMISSION	REG2ID(GFX_SPECULAR_EMISSION) /*!< \brief packed command for setting
 402:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_SHININESS			REG2ID(GFX_SHININESS) /*!< \brief packed command for setting the shininess
 403:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 404:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_POLY_FORMAT		REG2ID(GFX_POLY_FORMAT) /*!< \brief packed command for setting polygon at
 405:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 406:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_BEGIN				REG2ID(GFX_BEGIN) /*!< \brief packed command that starts a polygon vertex lis
 407:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_END				REG2ID(GFX_END) /*!< \brief packed command that has no discernable effect, it's
 408:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_FLUSH				REG2ID(GFX_FLUSH) /*!< \brief packed command that has the same effect as swiW
 409:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define FIFO_VIEWPORT			REG2ID(GFX_VIEWPORT) /*!< \brief packed command for setting viewport<BR><A 
 410:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 411:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 412:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #ifdef __cplusplus
 413:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** extern "C" {
 414:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #endif
 415:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 416:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Rotates the model view matrix by angle about the specified unit vector
 417:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param angle The angle to rotate by
 418:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x X component of the unit vector axis.
 419:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y Y component of the unit vector axis.
 420:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z Z component of the unit vector axis. */
 421:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glRotatef32i(int angle, int32 x, int32 y, int32 z);
 422:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 423:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Loads a 2D texture into texture memory and sets the currently bound texture ID to the at
 424:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target not used, just here for OpenGL compatibility
 425:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty1 not used, just here for OpenGL compatibility
 426:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param type The format of the texture
 427:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param sizeX the horizontal size of the texture; valid sizes are enumerated in GL_TEXTURE_TYPE_ENUM
 428:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param sizeY the vertical size of the texture; valid sizes are enumerated in GL_TEXTURE_TYPE_ENUM
 429:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty2 not used, just here for OpenGL compatibility
 430:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param param parameters for the texture
 431:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param texture pointer to the texture data to load
 432:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return 1 on success, 0 on failure*/
 433:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** int glTexImage2D(int target, int empty1, GL_TEXTURE_TYPE_ENUM type, int sizeX, int sizeY, int empty
 434:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 435:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief glColorTableEXT loads a 15-bit color format palette into palette memory, and sets it to 
 436:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target ignored, only here for OpenGL compatability
 437:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty1 ignored, only here for OpenGL compatability
 438:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param width the length of the palette (if 0, then palette is removed from currently bound texture)
 439:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty2 ignored, only here for OpenGL compatability
 440:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty3 ignored, only here for OpenGL compatability
 441:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param table pointer to the palette data to load (if NULL, then palette is removed from currently b
 442:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glColorTableEXT(int target, int empty1, uint16 width, int empty2, int empty3, const uint16* ta
 443:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 444:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief glColorSubTableEXT loads a 15-bit color format palette into a specific spot in a current
 445:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target ignored, only here for OpenGL compatability
 446:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param start the starting index that new palette data will be written to
 447:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param count the number of entries to write
 448:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty1 ignored, only here for OpenGL compatability
 449:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty2 ignored, only here for OpenGL compatability
 450:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param data pointer to the palette data to load */
 451:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glColorSubTableEXT( int target, int start, int count, int empty1, int empty2, const uint16* da
 452:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 453:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief glGetColorTableEXT retrieves a 15-bit color format palette from the palette memory of th
 454:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target ignored, only here for OpenGL compatability
 455:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty1 ignored, only here for OpenGL compatability
 456:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param empty2 ignored, only here for OpenGL compatability
 457:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param table pointer to where palette data will be written to */
 458:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glGetColorTableEXT( int target, int empty1, int empty2, uint16* table );
 459:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 460:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief glAssignColorTable sets the active texture with a palette set with another texture
 461:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target ignored, only here for OpenGL compatability (not really, since this isn't in OpenGL)
 462:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param name the name(int value) of the texture to load a palette from */
 463:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glAssignColorTable(int target, int name);
 464:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 465:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Set parameters for the current texture. Although named the same as its gl counterpart, i
 466:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target not used, just here for OpenGL compatibility
 467:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param param paramaters for the texture */
 468:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glTexParameter(int target, int param);
 469:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 470:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Returns the active texture parameter (constructed from internal call to glTexParameter) 
 471:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** u32 glGetTexParameter(void);
 472:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 473:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /* \brief glGetColorTableParameterEXT retrieves information pertaining to the currently bound textu
 474:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target ignored, only here for OpenGL compatibility
 475:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param pname a parameter of type GL_TEXTURE_PALETTE_PARAM_ENUM, used to read a specific attribute i
 476:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param params the destination for the attribute to read into */
 477:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glGetColorTableParameterEXT( int target, int pname, int * params );
 478:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 479:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief returns the address alocated to the texure named by name
 480:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param name the name of the texture to get a pointer to */
 481:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void* glGetTexturePointer(	int name);
 482:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 483:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief glBindTexure sets the current named texture to the active texture. Target is ignored as 
 484:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param target ignored, only here for OpenGL compatability
 485:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param name the name(int value) to set to the current texture */
 486:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glBindTexture(int target, int name);
 487:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 488:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Creates room for the specified number of textures
 489:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param n the number of textures to generate
 490:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param names pointer to the names array to fill
 491:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return 1 on success, 0 on failure*/
 492:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** int glGenTextures(int n, int *names);
 493:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 494:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Deletes the specified number of textures (and associated palettes)
 495:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param n the number of textures to delete
 496:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param names pointer to the names array to empty
 497:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return 1 on success, 0 on failure*/
 498:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** int glDeleteTextures(int n, int *names);
 499:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 500:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Resets the gl texture state freeing all texture and texture palette memory */
 501:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glResetTextures(void);
 502:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 503:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /* \brief Locks a designated vram bank to prevent consideration of the bank when allocating
 504:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param addr the address associated with the vram bank selected
 505:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return 1 on success, 0 on failure */
 506:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** int glLockVRAMBank( uint16 *addr );
 507:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 508:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 509:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /* \brief Unlocks a designated vram bank to allow consideration of the bank when allocating
 510:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param addr the address associated with the vram bank selected
 511:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return 1 on success, 0 on failure */
 512:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** int glUnlockVRAMBank( uint16 *addr );
 513:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 514:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief Sets texture coordinates for following vertices<BR>
 515:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dtextureattributes">GBATEK http://nocash.emubase.de
 516:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param u U(a.k.a. S) texture coordinate (0.0 - 1.0)
 517:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param v V(a.k.a. T) texture coordinate (0.0 - 1.0)*/
 518:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glTexCoord2f32(int32 u, int32 v);
 519:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 520:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \brief specify the material properties to be used in rendering lit polygons
 521:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param mode which material property to change
 522:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param color the color to set for that material property */
 523:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glMaterialf(GL_MATERIALS_ENUM mode, rgb color);
 524:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 525:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // This handles initialization of the GL state; this is called from glInit to keep globals synced b
 526:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glInit_C(void);
 527:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 528:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // This returns a pointer to the globals for videoGL
 529:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** gl_hidden_globals* glGetGlobals();
 530:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 531:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 532:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #ifdef __cplusplus
 533:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 534:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #endif
 535:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 536:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 537:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 538:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  u32 POLY_ALPHA(u32 n)
 539:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief used in glPolyFmt() to set the alpha level for the following polygons, set to 0 for wirefram
 540:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param n the level of alpha (0-31)
 541:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return value for hw register*/
 542:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  u32 POLY_ALPHA(u32 n) { return (u32)((n) << 16); };
 543:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 544:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 545:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  u32 POLY_ID(u32 n)
 546:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief used in glPolyFmt() to set the Polygon ID for the following polygons
 547:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param n the ID to set for following polygons (0-63)
 548:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \return value for hw register
 549:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** */
 550:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  u32 POLY_ID(u32 n) { return (u32)((n)<<24); };
 551:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 552:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 553:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glBegin(GL_GLBEGIN_ENUM mode)
 554:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Starts a polygon group
 555:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param mode the draw mode for the polygon */
 556:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glBegin(GL_GLBEGIN_ENUM mode) { GFX_BEGIN = mode; }
  28              		.loc 1 556 0
  29              		.cfi_startproc
  30              		@ Function supports interworking.
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 04B02DE5 		str	fp, [sp, #-4]!
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 11, -4
  38 0004 00B08DE2 		add	fp, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 11
  41 0008 0CD04DE2 		sub	sp, sp, #12
  42 000c 0030A0E1 		mov	r3, r0
  43 0010 05304BE5 		strb	r3, [fp, #-5]
  44              		.loc 1 556 0
  45 0014 10309FE5 		ldr	r3, .L2
  46 0018 05205BE5 		ldrb	r2, [fp, #-5]	@ zero_extendqisi2
  47 001c 002083E5 		str	r2, [r3]
  48 0020 00D04BE2 		sub	sp, fp, #0
  49              		@ sp needed
  50 0024 04B09DE4 		ldr	fp, [sp], #4
  51 0028 1EFF2FE1 		bx	lr
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 002c 00050004 		.word	67110144
  56              		.cfi_endproc
  57              	.LFE100:
  59              		.align	2
  61              	glVertex3v16:
  62              	.LFB105:
 557:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 558:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 559:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glEnd(void)
 560:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Ends a polygon group, this seems to be a dummy function that does absolutely nothing, feel f
 561:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glEnd(void) { GFX_END = 0; }
 562:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 563:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 564:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glClearDepth(fixed12d3 depth)
 565:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief reset the depth buffer to this value; generally set this to GL_MAX_DEPTH.<BR>
 566:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3drearplane">GBATEK http://nocash.emubase.de/gbatek.
 567:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param depth Something to do with the depth buffer, generally set to GL_MAX_DEPTH */
 568:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glClearDepth(fixed12d3 depth) { GFX_CLEAR_DEPTH = depth; }
 569:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 570:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 571:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glColor3b(uint8 red, uint8 green, uint8 blue)
 572:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Set the color for following vertices
 573:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param red the red component (0-255) Bottom 3 bits ignored
 574:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param green the green component (0-255) Bottom 3 bits ignored
 575:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param blue the blue component (0-255) Bottom 3 bits ignored*/
 576:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glColor3b(uint8 red, uint8 green, uint8 blue) { GFX_COLOR = (vu32)RGB15(red>>3, green>>3, blu
 577:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 578:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 579:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glColor(rgb color)
 580:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Set the color for following vertices
 581:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param color the 15bit color value */
 582:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glColor(rgb color) { GFX_COLOR = (vu32)color; }
 583:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 584:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 585:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glVertex3v16(v16 x, v16 y, v16 z)
 586:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief specifies a vertex
 587:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x the x component for the vertex
 588:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y the y component for the vertex
 589:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z the z component for the vertex */
 590:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glVertex3v16(v16 x, v16 y, v16 z) {
  63              		.loc 1 590 0
  64              		.cfi_startproc
  65              		@ Function supports interworking.
  66              		@ args = 0, pretend = 0, frame = 8
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0030 04B02DE5 		str	fp, [sp, #-4]!
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 4
  72              		.cfi_offset 11, -4
  73 0034 00B08DE2 		add	fp, sp, #0
  74              	.LCFI3:
  75              		.cfi_def_cfa_register 11
  76 0038 0CD04DE2 		sub	sp, sp, #12
  77 003c 0230A0E1 		mov	r3, r2
  78 0040 B6004BE1 		strh	r0, [fp, #-6]	@ movhi
  79 0044 B8104BE1 		strh	r1, [fp, #-8]	@ movhi
  80 0048 BA304BE1 		strh	r3, [fp, #-10]	@ movhi
 591:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_VERTEX16 = (y << 16) | (x & 0xFFFF);
  81              		.loc 1 591 0
  82 004c 30209FE5 		ldr	r2, .L5
  83 0050 F8305BE1 		ldrsh	r3, [fp, #-8]
  84 0054 0318A0E1 		mov	r1, r3, asl #16
  85 0058 F6305BE1 		ldrsh	r3, [fp, #-6]
  86 005c 0338A0E1 		mov	r3, r3, asl #16
  87 0060 2338A0E1 		mov	r3, r3, lsr #16
  88 0064 033081E1 		orr	r3, r1, r3
  89 0068 003082E5 		str	r3, [r2]
 592:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_VERTEX16 = z;
  90              		.loc 1 592 0
  91 006c 10309FE5 		ldr	r3, .L5
  92 0070 FA205BE1 		ldrsh	r2, [fp, #-10]
  93 0074 002083E5 		str	r2, [r3]
 593:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
  94              		.loc 1 593 0
  95 0078 00D04BE2 		sub	sp, fp, #0
  96              		@ sp needed
  97 007c 04B09DE4 		ldr	fp, [sp], #4
  98 0080 1EFF2FE1 		bx	lr
  99              	.L6:
 100              		.align	2
 101              	.L5:
 102 0084 8C040004 		.word	67110028
 103              		.cfi_endproc
 104              	.LFE105:
 106              		.align	2
 108              	glTranslatef32:
 109              	.LFB113:
 594:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 595:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 596:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glTexCoord2t16(t16 u, t16 v)
 597:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Sets texture coordinates for following vertices<BR>
 598:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dtextureattributes">GBATEK http://nocash.emubase.de
 599:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param u U(a.k.a. S) texture coordinate in texels
 600:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param v V(a.k.a. T) texture coordinate in texels */
 601:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glTexCoord2t16(t16 u, t16 v) { GFX_TEX_COORD = TEXTURE_PACK(u,v); }
 602:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 603:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 604:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn   void glPushMatrix(void)
 605:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Pushes the current matrix onto the stack<BR>
 606:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixstack">GBATEK http://nocash.emubase.de/gbate
 607:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glPushMatrix(void) { MATRIX_PUSH = 0; }
 608:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 609:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 610:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glPopMatrix(int num)
 611:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Pops num matrices off the stack<BR>
 612:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixstack">GBATEK http://nocash.emubase.de/gbate
 613:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param num the number to pop down the stack */
 614:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glPopMatrix(int num) { MATRIX_POP = num; }
 615:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 616:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 617:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glRestoreMatrix(int index)
 618:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Restores the current matrix from a location in the stack<BR>
 619:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixstack">GBATEK http://nocash.emubase.de/gbate
 620:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param index the place in the stack to restore to */
 621:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glRestoreMatrix(int index) { MATRIX_RESTORE = index; }
 622:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 623:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 624:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn   void glStoreMatrix(int index)
 625:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Place the current matrix into the stack at a location<BR>
 626:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixstack">GBATEK http://nocash.emubase.de/gbate
 627:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param index the place in the stack to put the current matrix */
 628:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glStoreMatrix(int index) { MATRIX_STORE = index; }
 629:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 630:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 631:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glScalev(const GLvector* v)
 632:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief multiply the current matrix by a translation matrix<BR>
 633:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixloadmultiply">GBATEK http://nocash.emubase.d
 634:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param v the vector to translate by */
 635:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glScalev(const GLvector* v) {
 636:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_SCALE = v->x;
 637:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_SCALE = v->y;
 638:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_SCALE = v->z;
 639:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 640:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 641:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 642:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glTranslatev(const GLvector* v)
 643:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief multiply the current matrix by a translation matrix<BR>
 644:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixloadmultiply">GBATEK http://nocash.emubase.d
 645:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param v the vector to translate by */
 646:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glTranslatev(const GLvector* v) {
 647:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_TRANSLATE = v->x;
 648:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_TRANSLATE = v->y;
 649:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_TRANSLATE = v->z;
 650:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 651:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 652:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** // map old name to new name
 653:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** #define glTranslate3f32 glTranslatef32
 654:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 655:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 656:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glTranslatef32(int x, int y, int z)
 657:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief multiply the current matrix by a translation matrix<BR>
 658:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixloadmultiply">GBATEK http://nocash.emubase.d
 659:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x translation on the x axis
 660:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y translation on the y axis
 661:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z translation on the z axis */
 662:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glTranslatef32(int x, int y, int z) {
 110              		.loc 1 662 0
 111              		.cfi_startproc
 112              		@ Function supports interworking.
 113              		@ args = 0, pretend = 0, frame = 16
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116 0088 04B02DE5 		str	fp, [sp, #-4]!
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 11, -4
 120 008c 00B08DE2 		add	fp, sp, #0
 121              	.LCFI5:
 122              		.cfi_def_cfa_register 11
 123 0090 14D04DE2 		sub	sp, sp, #20
 124 0094 08000BE5 		str	r0, [fp, #-8]
 125 0098 0C100BE5 		str	r1, [fp, #-12]
 126 009c 10200BE5 		str	r2, [fp, #-16]
 663:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_TRANSLATE = x;
 127              		.loc 1 663 0
 128 00a0 28309FE5 		ldr	r3, .L8
 129 00a4 08201BE5 		ldr	r2, [fp, #-8]
 130 00a8 002083E5 		str	r2, [r3]
 664:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_TRANSLATE = y;
 131              		.loc 1 664 0
 132 00ac 1C309FE5 		ldr	r3, .L8
 133 00b0 0C201BE5 		ldr	r2, [fp, #-12]
 134 00b4 002083E5 		str	r2, [r3]
 665:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_TRANSLATE = z;
 135              		.loc 1 665 0
 136 00b8 10309FE5 		ldr	r3, .L8
 137 00bc 10201BE5 		ldr	r2, [fp, #-16]
 138 00c0 002083E5 		str	r2, [r3]
 666:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 139              		.loc 1 666 0
 140 00c4 00D04BE2 		sub	sp, fp, #0
 141              		@ sp needed
 142 00c8 04B09DE4 		ldr	fp, [sp], #4
 143 00cc 1EFF2FE1 		bx	lr
 144              	.L9:
 145              		.align	2
 146              	.L8:
 147 00d0 70040004 		.word	67110000
 148              		.cfi_endproc
 149              	.LFE113:
 151              		.align	2
 153              	glLoadIdentity:
 154              	.LFB117:
 667:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 668:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 669:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glScalef32(int x, int y, int z)
 670:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief multiply the current matrix by a scale matrix<BR>
 671:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixloadmultiply">GBATEK http://nocash.emubase.d
 672:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x scaling on the x axis
 673:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y scaling on the y axis
 674:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z scaling on the z axis */
 675:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glScalef32(int x, int y, int z) {
 676:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_SCALE = x;
 677:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_SCALE = y;
 678:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_SCALE = z;
 679:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 680:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 681:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 682:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glLight(int id, rgb color, v10 x, v10 y, v10 z)
 683:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief set a light up. Only parallel light sources are supported on the DS<BR>
 684:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dpolygonlightparameters">GBATEK http://nocash.emuba
 685:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param id the number of the light to setup
 686:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param color the color of the light
 687:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x the x component of the lights directional vector. Direction must be normalized
 688:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y the y component of the lights directional vector. Direction must be normalized
 689:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z the z component of the lights directional vector. Direction must be normalized */
 690:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glLight(int id, rgb color, v10 x, v10 y, v10 z) {
 691:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	id = (id & 3) << 30;
 692:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_LIGHT_VECTOR = id | ((z & 0x3FF) << 20) | ((y & 0x3FF) << 10) | (x & 0x3FF);
 693:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_LIGHT_COLOR = id | color;
 694:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 695:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 696:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 697:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glNormal(u32 normal)
 698:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief the normal to use for following vertices<BR>
 699:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dpolygonlightparameters">GBATEK http://nocash.emuba
 700:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \warning The nature of the format means that you can't represent the following normals exactly (0,0
 701:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param normal the packed normal(3 * 10bit x, y, z) */
 702:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glNormal(u32 normal) { GFX_NORMAL = normal; }
 703:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 704:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 705:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glLoadIdentity(void)
 706:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief loads an identity matrix to the current matrix, same as glIdentity(void) */
 707:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glLoadIdentity(void) { MATRIX_IDENTITY = 0; }
 155              		.loc 1 707 0
 156              		.cfi_startproc
 157              		@ Function supports interworking.
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161 00d4 04B02DE5 		str	fp, [sp, #-4]!
 162              	.LCFI6:
 163              		.cfi_def_cfa_offset 4
 164              		.cfi_offset 11, -4
 165 00d8 00B08DE2 		add	fp, sp, #0
 166              	.LCFI7:
 167              		.cfi_def_cfa_register 11
 168              		.loc 1 707 0
 169 00dc 10309FE5 		ldr	r3, .L11
 170 00e0 0020A0E3 		mov	r2, #0
 171 00e4 002083E5 		str	r2, [r3]
 172 00e8 00D04BE2 		sub	sp, fp, #0
 173              		@ sp needed
 174 00ec 04B09DE4 		ldr	fp, [sp], #4
 175 00f0 1EFF2FE1 		bx	lr
 176              	.L12:
 177              		.align	2
 178              	.L11:
 179 00f4 54040004 		.word	67109972
 180              		.cfi_endproc
 181              	.LFE117:
 183              		.align	2
 185              	glFlush:
 186              	.LFB120:
 708:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 709:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 710:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glMatrixMode(GL_MATRIX_MODE_ENUM mode)
 711:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief change the current matrix mode<BR>
 712:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dmatrixloadmultiply">GBATEK http://nocash.emubase.d
 713:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param mode the mode for the matrix */
 714:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glMatrixMode(GL_MATRIX_MODE_ENUM mode) { MATRIX_CONTROL = mode; }
 715:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 716:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 717:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn   void glViewport(uint8 x1, uint8 y1, uint8 x2, uint8 y2)
 718:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief specify the viewport for following drawing, can be set several times per frame.<BR>
 719:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3ddisplaycontrol">GBATEK http://nocash.emubase.de/gb
 720:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x1 the left of the viewport
 721:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y1 the bottom of the viewport
 722:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x2 the right of the viewport
 723:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y2 the top of the viewport */
 724:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glViewport(uint8 x1, uint8 y1, uint8 x2, uint8 y2) { GFX_VIEWPORT = (x1) + (y1 << 8) + (x2 <<
 725:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 726:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 727:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glFlush(u32 mode)
 728:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Waits for a Vblank and swaps the buffers(like swiWaitForVBlank), but lets you specify some 3
 729:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3ddisplaycontrol">GBATEK http://nocash.emubase.de/gb
 730:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param mode flags from GLFLUSH_ENUM for enabling Y-sorting of translucent polygons and W-Buffering 
 731:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glFlush(u32 mode) { asm volatile("" ::: "memory"); GFX_FLUSH = mode; }
 187              		.loc 1 731 0
 188              		.cfi_startproc
 189              		@ Function supports interworking.
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 00f8 04B02DE5 		str	fp, [sp, #-4]!
 194              	.LCFI8:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 11, -4
 197 00fc 00B08DE2 		add	fp, sp, #0
 198              	.LCFI9:
 199              		.cfi_def_cfa_register 11
 200 0100 0CD04DE2 		sub	sp, sp, #12
 201 0104 08000BE5 		str	r0, [fp, #-8]
 202              		.loc 1 731 0
 203 0108 10309FE5 		ldr	r3, .L14
 204 010c 08201BE5 		ldr	r2, [fp, #-8]
 205 0110 002083E5 		str	r2, [r3]
 206 0114 00D04BE2 		sub	sp, fp, #0
 207              		@ sp needed
 208 0118 04B09DE4 		ldr	fp, [sp], #4
 209 011c 1EFF2FE1 		bx	lr
 210              	.L15:
 211              		.align	2
 212              	.L14:
 213 0120 40050004 		.word	67110208
 214              		.cfi_endproc
 215              	.LFE120:
 217              		.global	__aeabi_fmul
 218              		.global	__aeabi_f2iz
 219              		.align	2
 221              	glVertex3f:
 222              	.LFB154:
 732:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 733:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 734:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glMaterialShinyness(void)
 735:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief The DS uses a table for shininess..this generates a half-ass one */
 736:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glMaterialShinyness(void) {
 737:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	u32 shiny32[128/4];
 738:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	u8  *shiny8 = (u8*)shiny32;
 739:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 740:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int i;
 741:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 742:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	for (i = 0; i < 128 * 2; i += 2)
 743:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		shiny8[i>>1] = i;
 744:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 745:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	for (i = 0; i < 128 / 4; i++)
 746:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		GFX_SHININESS = shiny32[i];
 747:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 748:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 749:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 750:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glCallList(const u32* list)
 751:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief throws a packed list of commands into the graphics FIFO via asyncronous DMA<BR>
 752:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** The first 32bits is the length of the packed command list, followed by a the packed list.<BR>
 753:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** If you want to do this really fast then write your own code that that does this synchronously and o
 754:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** There is sometimes a problem when you pack the GFX_END command into a list, so don't. GFX_END is a 
 755:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dgeometrycommands">GBATEK http://nocash.emubase.de/
 756:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glCallList(const u32* list) {
 757:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(list != NULL,"glCallList received a null display list pointer");
 758:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 759:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	u32 count = *list++;
 760:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 761:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(count != 0,"glCallList received a display list of size 0");
 762:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 763:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// flush the area that we are going to DMA
 764:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DC_FlushRange(list, count*4);
 765:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 766:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// don't start DMAing while anything else is being DMAed because FIFO DMA is touchy as hell
 767:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	//    If anyone can explain this better that would be great. -- gabebear
 768:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	while((DMA_CR(0) & DMA_BUSY)||(DMA_CR(1) & DMA_BUSY)||(DMA_CR(2) & DMA_BUSY)||(DMA_CR(3) & DMA_BUS
 769:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 770:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// send the packed list asynchronously via DMA to the FIFO
 771:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DMA_SRC(0) = (u32)list;
 772:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DMA_DEST(0) = 0x4000400;
 773:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	DMA_CR(0) = DMA_FIFO | count;
 774:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	while(DMA_CR(0) & DMA_BUSY);
 775:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 776:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 777:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glPolyFmt(u32 params)
 778:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Set the parameters for polygons rendered on the current frame<BR>
 779:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3dpolygonattributes">GBATEK http://nocash.emubase.de
 780:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param params the paramters to set for the polygons for the current frame. valid paramters are enum
 781:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glPolyFmt(u32 params) {
 782:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_POLY_FORMAT = params;
 783:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 784:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 785:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 786:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glEnable(int bits)
 787:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Enables various gl states (blend, alpha test, etc..)
 788:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param bits bit mask of desired attributes, attributes are enumerated in DISP3DCNT_ENUM */
 789:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glEnable(int bits) {
 790:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_CONTROL |= bits;
 791:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 792:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 793:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 794:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn   void glDisable(int bits)
 795:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Disables various gl states (blend, alpha test, etc..)
 796:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param bits bit mask of desired attributes, attributes are enumerated in DISP3DCNT_ENUM */
 797:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glDisable(int bits) {
 798:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_CONTROL &= ~bits;
 799:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 800:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 801:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 802:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn   void glFogShift(int shift)
 803:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Sets the FOG_SHIFT value
 804:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param shift FOG_SHIFT value; each entry of the fog table covers 0x400 >> FOG_SHIFT depth values */
 805:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glFogShift(int shift) {
 806:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(shift>=0 && shift<16,"glFogShift is out of range");
 807:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_CONTROL = (GFX_CONTROL & 0xF0FF) | (shift<<8);
 808:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 809:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 810:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 811:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn   void glFogOffset(int shift)
 812:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Sets the FOG_OFFSET value
 813:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param shift FOG_OFFSET value; fogging begins at this depth with a density of FOG_TABLE[0]*/
 814:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glFogOffset(int offset) {
 815:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(offset>=0 && offset<0x8000,"glFogOffset is out of range");
 816:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_FOG_OFFSET = offset;
 817:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 818:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 819:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 820:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glFogColor(uint8 red, uint8 green, uint8 blue, uint8 alpha)
 821:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief sets the fog color
 822:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param red component (0-31)
 823:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param green component (0-31)
 824:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param blue component (0-31)
 825:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param alpha from 0(clear) to 31(opaque)*/
 826:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glFogColor(uint8 red, uint8 green, uint8 blue, uint8 alpha) {
 827:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(red<32,"glFogColor red is out of range");
 828:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(green<32,"glFogColor green is out of range");
 829:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(blue<32,"glFogColor blue is out of range");
 830:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(alpha<32,"glFogColor alpha is out of range");
 831:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_FOG_COLOR = RGB15(red,green,blue) | (alpha << 16);
 832:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 833:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 834:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 835:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glFogDensity(int index, int density)
 836:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief sets the fog density at a given index
 837:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param index fog table index to operate on (0 to 31)
 838:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param density fog density from 0 (none) to 127 (opaque)*/
 839:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glFogDensity(int index, int density) {
 840:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(index>= 0 && index<32,"glFogDensity index is out of range");
 841:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	sassert(index>= 0 && density<128,"glFogDensity density is out of range");
 842:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_FOG_TABLE[index] = density;
 843:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 844:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 845:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 846:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 847:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn  void glLoadMatrix4x4(const m4x4 *m)
 848:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Loads a 4x4 matrix into the current matrix
 849:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param m pointer to a 4x4 matrix */
 850:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glLoadMatrix4x4(const m4x4 *m) {
 851:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[0];
 852:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[1];
 853:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[2];
 854:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[3];
 855:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 856:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[4];
 857:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[5];
 858:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[6];
 859:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[7];
 860:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 861:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[8];
 862:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[9];
 863:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[10];
 864:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[11];
 865:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 866:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[12];
 867:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[13];
 868:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[14];
 869:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x4 = m->m[15];
 870:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 871:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 872:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 873:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glLoadMatrix4x3(const m4x3 * m)
 874:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Loads a 4x3 matrix into the current matrix
 875:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param m pointer to a 4x4 matrix */
 876:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glLoadMatrix4x3(const m4x3 * m) {
 877:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[0];
 878:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[1];
 879:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[2];
 880:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[3];
 881:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 882:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[4];
 883:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[5];
 884:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[6];
 885:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[7];
 886:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 887:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[8];
 888:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[9];
 889:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[10];
 890:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_LOAD4x3 = m->m[11];
 891:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 892:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 893:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 894:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glMultMatrix4x4(const m4x4 * m)
 895:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Multiplies the current matrix by m
 896:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param m pointer to a 4x4 matrix */
 897:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glMultMatrix4x4(const m4x4 * m) {
 898:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[0];
 899:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[1];
 900:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[2];
 901:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[3];
 902:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 903:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[4];
 904:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[5];
 905:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[6];
 906:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[7];
 907:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 908:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[8];
 909:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[9];
 910:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[10];
 911:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[11];
 912:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 913:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[12];
 914:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[13];
 915:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[14];
 916:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = m->m[15];
 917:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 918:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 919:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 920:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glMultMatrix4x3(const m4x3 * m)
 921:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief multiplies the current matrix by
 922:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param m pointer to a 4x3 matrix */
 923:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glMultMatrix4x3(const m4x3 * m) {
 924:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[0];
 925:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[1];
 926:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[2];
 927:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[3];
 928:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 929:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[4];
 930:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[5];
 931:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[6];
 932:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[7];
 933:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 934:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[8];
 935:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[9];
 936:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[10];
 937:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = m->m[11];
 938:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 939:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 940:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 941:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 942:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glMultMatrix3x3(const m3x3 * m)
 943:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief multiplies the current matrix by m
 944:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param m pointer to a 3x3 matrix */
 945:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glMultMatrix3x3(const m3x3 * m) {
 946:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[0];
 947:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[1];
 948:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[2];
 949:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 950:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[3];
 951:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[4];
 952:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[5];
 953:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 954:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[6];
 955:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[7];
 956:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = m->m[8];
 957:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 958:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 959:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 960:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glRotateXi(int angle)
 961:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Rotates the current modelview matrix by angle about the x axis
 962:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param angle The angle to rotate by (angle is -32768 to 32767) */
 963:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glRotateXi(int angle) {
 964:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int sine = sinLerp(angle);//SIN[angle &  LUT_MASK];
 965:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int cosine = cosLerp(angle);//COS[angle & LUT_MASK];
 966:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 967:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = inttof32(1);
 968:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 969:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 970:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 971:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 972:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = cosine;
 973:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = sine;
 974:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 975:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 976:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = -sine;
 977:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = cosine;
 978:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 979:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 980:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
 981:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glRotateYi(int angle)
 982:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Rotates the current modelview matrix by angle about the y axis
 983:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param angle The angle to rotate by (angle is -32768 to 32767) */
 984:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glRotateYi(int angle) {
 985:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int sine = sinLerp(angle);//SIN[angle &  LUT_MASK];
 986:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int cosine = cosLerp(angle);//COS[angle & LUT_MASK];
 987:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 988:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = cosine;
 989:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 990:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = -sine;
 991:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 992:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 993:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = inttof32(1);
 994:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 995:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
 996:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = sine;
 997:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
 998:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = cosine;
 999:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1000:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1001:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1002:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glRotateZi(int angle)
1003:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Rotates the current modelview matrix by angle about the z axis
1004:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param angle The angle to rotate by (angle is -32768 to 32767) */
1005:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glRotateZi(int angle) {
1006:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int sine = sinLerp(angle);//SIN[angle &  LUT_MASK];
1007:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int cosine = cosLerp(angle);//COS[angle & LUT_MASK];
1008:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1009:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = cosine;
1010:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = sine;
1011:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
1012:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1013:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = - sine;
1014:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = cosine;
1015:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
1016:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1017:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
1018:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = 0;
1019:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT3x3 = inttof32(1);
1020:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1021:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1022:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1023:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glOrthof32(int left, int right, int bottom, int top, int zNear, int zFar)
1024:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Multiplies the current matrix into ortho graphic mode
1025:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param left left vertical clipping plane
1026:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param right right vertical clipping plane
1027:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param bottom bottom vertical clipping plane
1028:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param top top vertical clipping plane
1029:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param zNear near clipping plane
1030:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param zFar far clipping plane */
1031:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glOrthof32(int left, int right, int bottom, int top, int zNear, int zFar) {
1032:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(inttof32(2), right - left);
1033:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1034:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1035:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1036:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1037:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1038:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(inttof32(2), top - bottom);
1039:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1040:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1041:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1042:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1043:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1044:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(inttof32(-2), zFar - zNear);
1045:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1046:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1047:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = -divf32(right + left, right - left);//0;
1048:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = -divf32(top + bottom, top - bottom); //0;
1049:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = -divf32(zFar + zNear, zFar - zNear);//0;
1050:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = floattof32(1.0F);
1051:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1052:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1053:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void gluLookAtf32(int eyex, int eyey, int eyez, int lookAtx, int lookAty, int lookAtz, int
1054:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Places the camera at the specified location and orientation (fixed point version)
1055:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param eyex (eyex, eyey, eyez) Location of the camera.
1056:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param eyey (eyex, eyey, eyez) Location of the camera.
1057:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param eyez (eyex, eyey, eyez) Location of the camera.
1058:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param lookAtx (lookAtx, lookAty, lookAtz) Where the camera is looking.
1059:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param lookAty (lookAtx, lookAty, lookAtz) Where the camera is looking.
1060:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param lookAtz (lookAtx, lookAty, lookAtz) Where the camera is looking.
1061:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param upx <upx, upy, upz> Unit vector describing which direction is up for the camera.
1062:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param upy <upx, upy, upz> Unit vector describing which direction is up for the camera.
1063:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param upz <upx, upy, upz> Unit vector describing which direction is up for the camera. */
1064:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void gluLookAtf32(int eyex, int eyey, int eyez, int lookAtx, int lookAty, int lookAtz, int upx, int
1065:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int32 side[3], forward[3], up[3], eye[3];
1066:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1067:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	forward[0] = eyex - lookAtx;
1068:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	forward[1] = eyey - lookAty;
1069:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	forward[2] = eyez - lookAtz;
1070:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1071:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	normalizef32(forward);
1072:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1073:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	up[0] = upx;
1074:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	up[1] = upy;
1075:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	up[2] = upz;
1076:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	eye[0] = eyex;
1077:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	eye[1] = eyey;
1078:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	eye[2] = eyez;
1079:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1080:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	crossf32(up, forward, side);
1081:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1082:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	normalizef32(side);
1083:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1084:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// Recompute local up
1085:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	crossf32(forward, side, up);
1086:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1087:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glMatrixMode(GL_MODELVIEW);
1088:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1089:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1090:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// should we use MATRIX_MULT4x3?
1091:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = side[0];
1092:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = up[0];
1093:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = forward[0];
1094:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1095:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = side[1];
1096:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = up[1];
1097:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = forward[1];
1098:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1099:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = side[2];
1100:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = up[2];
1101:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = forward[2];
1102:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1103:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = -dotf32(eye,side);
1104:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = -dotf32(eye,up);
1105:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x3 = -dotf32(eye,forward);
1106:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1107:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1108:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1109:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1110:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glFrustumf32(int left, int right, int bottom, int top, int near, int far)
1111:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Specifies the viewing frustum for the projection matrix (fixed point version)
1112:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param left left right top and bottom describe a rectangle located at the near clipping plane
1113:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param right left right top and bottom describe a rectangle located at the near clipping plane
1114:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param top left right top and bottom describe a rectangle located at the near clipping plane
1115:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param bottom left right top and bottom describe a rectangle located at the near clipping plane
1116:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param near Location of a the near clipping plane (parallel to viewing window)
1117:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param far Location of a the far clipping plane (parallel to viewing window) */
1118:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glFrustumf32(int left, int right, int bottom, int top, int near, int far) {
1119:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1120:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(2*near, right - left);
1121:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1122:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1123:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1124:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1125:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1126:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(2*near, top - bottom);
1127:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1128:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1129:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1130:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(right + left, right - left);
1131:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = divf32(top + bottom, top - bottom);
1132:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = -divf32(far + near, far - near);
1133:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = floattof32(-1.0F);
1134:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1135:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1136:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1137:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = -divf32(2 * mulf32(far, near), far - near);
1138:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1139:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1140:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1141:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1142:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void gluPerspectivef32(int fovy, int aspect, int zNear, int zFar)
1143:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Utility function which sets up the projection matrix (fixed point version)
1144:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param fovy Specifies the field of view in degrees (-32768 to 32767)
1145:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param aspect Specifies the aspect ratio of the screen (normally screen width/screen height)
1146:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param zNear Specifies the near clipping plane
1147:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param zFar Specifies the far clipping plane */
1148:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void gluPerspectivef32(int fovy, int aspect, int zNear, int zFar) {
1149:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int xmin, xmax, ymin, ymax;
1150:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1151:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	ymax = mulf32(zNear, tanLerp(fovy>>1));
1152:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1153:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	ymin = -ymax;
1154:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	xmin = mulf32(ymin, aspect);
1155:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	xmax = mulf32(ymax, aspect);
1156:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1157:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glFrustumf32(xmin, xmax, ymin, ymax, zNear, zFar);
1158:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1159:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1160:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1161:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void gluPickMatrix(int x, int y, int width, int height, const int viewport[4])
1162:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Utility function which generates a picking matrix for selection
1163:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x 2D x of center  (touch x normally)
1164:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y 2D y of center  (touch y normally)
1165:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param width width in pixels of the window (3 or 4 is a good number)
1166:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param height height in pixels of the window (3 or 4 is a good number)
1167:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param viewport the current viewport (normally {0, 0, 255, 191}) */
1168:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void gluPickMatrix(int x, int y, int width, int height, const int viewport[4]) {
1169:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = inttof32(viewport[2]) / width;
1170:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1171:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1172:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1173:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1174:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = inttof32(viewport[3]) / height;
1175:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1176:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1177:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1178:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1179:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = inttof32(1);
1180:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1181:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = inttof32(viewport[2] + ((viewport[0] - x)<<1)) / width;
1182:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = inttof32(viewport[3] + ((viewport[1] - y)<<1)) / height;
1183:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = 0;
1184:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	MATRIX_MULT4x4 = inttof32(1);
1185:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1186:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1187:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1188:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glResetMatrixStack(void)
1189:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Resets matrix stack to top level */
1190:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glResetMatrixStack(void) {
1191:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// make sure there are no push/pops that haven't executed yet
1192:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	while(GFX_STATUS & BIT(14)){
1193:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		GFX_STATUS |= 1 << 15; // clear push/pop errors or push/pop busy bit never clears
1194:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	}
1195:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1196:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// pop the projection stack to the top; poping 0 off an empty stack causes an error... weird?
1197:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	if((GFX_STATUS&(1<<13))!=0) {
1198:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		glMatrixMode(GL_PROJECTION);
1199:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		glPopMatrix(1);
1200:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	}
1201:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1202:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// 31 deep modelview matrix; 32nd entry works but sets error flag
1203:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glMatrixMode(GL_MODELVIEW);
1204:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glPopMatrix((GFX_STATUS >> 8) & 0x1F);
1205:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1206:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	// load identity to all the matrices
1207:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glMatrixMode(GL_MODELVIEW);
1208:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glLoadIdentity();
1209:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glMatrixMode(GL_PROJECTION);
1210:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glLoadIdentity();
1211:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glMatrixMode(GL_TEXTURE);
1212:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glLoadIdentity();
1213:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1214:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1215:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glSetOutlineColor(int id, rgb color)
1216:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Specifies an edge color for polygons
1217:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param id which outline color to set (0-7)
1218:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param color the 15bit color to set */
1219:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glSetOutlineColor(int id, rgb color) {
1220:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_EDGE_TABLE[id] = color;
1221:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1222:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1223:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1224:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glSetToonTable(const uint16 *table)
1225:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Loads a toon table
1226:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param table pointer to the 32 color palette to load into the toon table*/
1227:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glSetToonTable(const uint16 *table) {
1228:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int i;
1229:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	for(i = 0; i < 32; i++ )
1230:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		GFX_TOON_TABLE[i] = table[i];
1231:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1232:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1233:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1234:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glSetToonTableRange(int start, int end, rgb color)
1235:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Sets a range of colors on the toon table
1236:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param start the start of the range
1237:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param end the end of the range
1238:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param color the color to set for that range */
1239:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****  void glSetToonTableRange(int start, int end, rgb color) {
1240:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int i;
1241:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	for(i = start; i <= end; i++ )
1242:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		GFX_TOON_TABLE[i] = color;
1243:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1244:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1245:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1246:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glGetFixed(const GL_GET_ENUM param, int* f)
1247:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Grabs fixed format of state variables<BR>
1248:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** OpenGL's modelview matrix is handled on the DS with two matrices. The combination of the DS's posit
1249:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3diomap">http://nocash.emubase.de/gbatek.htm#ds3diom
1250:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param param The state variable to retrieve
1251:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param f pointer with room to hold the requested data */
1252:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glGetFixed(const GL_GET_ENUM param, int* f) {
1253:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	int i;
1254:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	switch (param) {
1255:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_MATRIX_VECTOR:
1256:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			while(GFX_BUSY); // wait until the graphics engine has stopped to read matrixes
1257:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			for(i = 0; i < 9; i++) f[i] = MATRIX_READ_VECTOR[i];
1258:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1259:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_MATRIX_CLIP:
1260:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			while(GFX_BUSY); // wait until the graphics engine has stopped to read matrixes
1261:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			for(i = 0; i < 16; i++) f[i] = MATRIX_READ_CLIP[i];
1262:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1263:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_MATRIX_PROJECTION:
1264:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glMatrixMode(GL_POSITION);
1265:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glPushMatrix(); // save the current state of the position matrix
1266:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glLoadIdentity(); // load an identity matrix into the position matrix so that the clip matrix = 
1267:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			while(GFX_BUSY); // wait until the graphics engine has stopped to read matrixes
1268:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 				for(i = 0; i < 16; i++) f[i] = MATRIX_READ_CLIP[i]; // read out the projection matrix
1269:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glPopMatrix(1); // restore the position matrix
1270:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1271:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_MATRIX_POSITION:
1272:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glMatrixMode(GL_PROJECTION);
1273:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glPushMatrix(); // save the current state of the projection matrix
1274:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glLoadIdentity(); // load a identity matrix into the projection matrix so that the clip matrix =
1275:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			while(GFX_BUSY); // wait until the graphics engine has stopped to read matrixes
1276:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 				for(i = 0; i < 16; i++) f[i] = MATRIX_READ_CLIP[i]; // read out the position matrix
1277:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			glPopMatrix(1); // restore the projection matrix
1278:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1279:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		default:
1280:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1281:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	}
1282:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1283:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1284:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1285:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn void glAlphaFunc(int alphaThreshold)
1286:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief set the minimum alpha value that will be used<BR>
1287:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3ddisplaycontrol">GBATEK http://nocash.emubase.de/gb
1288:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param alphaThreshold minimum alpha value that will be used (0-15) */
1289:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glAlphaFunc(int alphaThreshold) {
1290:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_ALPHA_TEST = alphaThreshold;
1291:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1292:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1293:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1294:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*!  \fn  void glCutoffDepth(fixed12d3 wVal)
1295:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Stop the drawing of polygons that are a certain distance from the camera.<BR>
1296:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** <A HREF="http://nocash.emubase.de/gbatek.htm#ds3ddisplaycontrol">GBATEK http://nocash.emubase.de/gb
1297:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param wVal polygons that are beyond this W-value(distance from camera) will not be drawn; 15bit va
1298:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glCutoffDepth(fixed12d3 wVal) {
1299:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_CUTOFF_DEPTH = wVal;
1300:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1301:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1302:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1303:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glInit()
1304:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Initializes the gl state machine (must be called once before using gl calls) */
1305:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glInit() {
1306:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glInit_C(); // actually does the initialization
1307:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1308:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1309:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1310:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glClearColor(uint8 red, uint8 green, uint8 blue, uint8 alpha)
1311:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief sets the color of the rear-plane(a.k.a Clear Color/Plane)
1312:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param red component (0-31)
1313:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param green component (0-31)
1314:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param blue component (0-31)
1315:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param alpha from 0(clear) to 31(opaque)*/
1316:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glClearColor(uint8 red, uint8 green, uint8 blue, uint8 alpha) {
1317:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_CLEAR_COLOR = glGlob->clearColor = ( glGlob->clearColor & 0xFFE08000) | (0x7FFF & RGB15(red, g
1318:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1319:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1320:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1321:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glClearPolyID(uint8 ID)
1322:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief sets the polygon ID of the rear-plane(a.k.a. Clear/Color Plane), useful for antialiasing and
1323:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param ID the polygon ID to give the rear-plane */
1324:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glClearPolyID(uint8 ID) {
1325:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	GFX_CLEAR_COLOR = glGlob->clearColor = ( glGlob->clearColor & 0xC0FFFFFF) | (( ID & 0x3F ) << 24 )
1326:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1327:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1328:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1329:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glGetInt(GL_GET_ENUM param, int* i)
1330:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Grabs integer state variables from openGL
1331:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param param The state variable to retrieve
1332:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param i pointer with room to hold the requested data */
1333:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glGetInt(GL_GET_ENUM param, int* i) {
1334:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	switch (param) {
1335:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_POLYGON_RAM_COUNT:
1336:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			*i = GFX_POLYGON_RAM_USAGE;
1337:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1338:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_VERTEX_RAM_COUNT:
1339:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			*i = GFX_VERTEX_RAM_USAGE;
1340:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1341:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_TEXTURE_WIDTH: {
1342:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			gl_texture_data *tex = (gl_texture_data*)DynamicArrayGet( &glGlob->texturePtrs, glGlob->activeTe
1343:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			if( tex )
1344:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 				*i = 8 << ((tex->texFormat >> 20 ) & 7 );
1345:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break; }
1346:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		case GL_GET_TEXTURE_HEIGHT: {
1347:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			gl_texture_data *tex = (gl_texture_data*)DynamicArrayGet( &glGlob->texturePtrs, glGlob->activeTe
1348:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			if( tex )
1349:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 				*i = 8 << ((tex->texFormat >> 23 ) & 7 );
1350:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break; }
1351:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 		default:
1352:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 			break;
1353:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	}
1354:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
1355:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1356:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1357:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //---------------------------------------------------------------------------------
1358:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //                    INLINED FlOAT WRAPPERS
1359:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //
1360:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //  All floating point functions.
1361:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** //
1362:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1363:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glVertex3f(float x, float y, float z)
1364:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief specifies a vertex location
1365:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \warning FLOAT VERSION!!!! please use glVertex3v16()
1366:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x the x component of the vertex
1367:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y the y component of the vertex
1368:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z the z component of the vertex */
1369:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glVertex3f(float x, float y, float z) {
 223              		.loc 1 1369 0
 224              		.cfi_startproc
 225              		@ Function supports interworking.
 226              		@ args = 0, pretend = 0, frame = 16
 227              		@ frame_needed = 1, uses_anonymous_args = 0
 228 0124 30482DE9 		stmfd	sp!, {r4, r5, fp, lr}
 229              	.LCFI10:
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 4, -16
 232              		.cfi_offset 5, -12
 233              		.cfi_offset 11, -8
 234              		.cfi_offset 14, -4
 235 0128 0CB08DE2 		add	fp, sp, #12
 236              	.LCFI11:
 237              		.cfi_def_cfa 11, 4
 238 012c 10D04DE2 		sub	sp, sp, #16
 239 0130 10000BE5 		str	r0, [fp, #-16]	@ float
 240 0134 14100BE5 		str	r1, [fp, #-20]	@ float
 241 0138 18200BE5 		str	r2, [fp, #-24]	@ float
1370:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 	glVertex3v16(floattov16(x), floattov16(y), floattov16(z));
 242              		.loc 1 1370 0
 243 013c 10001BE5 		ldr	r0, [fp, #-16]	@ float
 244 0140 94109FE5 		ldr	r1, .L17
 245 0144 FEFFFFEB 		bl	__aeabi_fmul
 246 0148 0030A0E1 		mov	r3, r0
 247 014c 0300A0E1 		mov	r0, r3
 248 0150 FEFFFFEB 		bl	__aeabi_f2iz
 249 0154 0030A0E1 		mov	r3, r0
 250 0158 0338A0E1 		mov	r3, r3, asl #16
 251 015c 2358A0E1 		mov	r5, r3, lsr #16
 252 0160 14001BE5 		ldr	r0, [fp, #-20]	@ float
 253 0164 70109FE5 		ldr	r1, .L17
 254 0168 FEFFFFEB 		bl	__aeabi_fmul
 255 016c 0030A0E1 		mov	r3, r0
 256 0170 0300A0E1 		mov	r0, r3
 257 0174 FEFFFFEB 		bl	__aeabi_f2iz
 258 0178 0030A0E1 		mov	r3, r0
 259 017c 0338A0E1 		mov	r3, r3, asl #16
 260 0180 2348A0E1 		mov	r4, r3, lsr #16
 261 0184 18001BE5 		ldr	r0, [fp, #-24]	@ float
 262 0188 4C109FE5 		ldr	r1, .L17
 263 018c FEFFFFEB 		bl	__aeabi_fmul
 264 0190 0030A0E1 		mov	r3, r0
 265 0194 0300A0E1 		mov	r0, r3
 266 0198 FEFFFFEB 		bl	__aeabi_f2iz
 267 019c 0030A0E1 		mov	r3, r0
 268 01a0 0338A0E1 		mov	r3, r3, asl #16
 269 01a4 2338A0E1 		mov	r3, r3, lsr #16
 270 01a8 0528A0E1 		mov	r2, r5, asl #16
 271 01ac 4218A0E1 		mov	r1, r2, asr #16
 272 01b0 0428A0E1 		mov	r2, r4, asl #16
 273 01b4 4228A0E1 		mov	r2, r2, asr #16
 274 01b8 0338A0E1 		mov	r3, r3, asl #16
 275 01bc 4338A0E1 		mov	r3, r3, asr #16
 276 01c0 0100A0E1 		mov	r0, r1
 277 01c4 0210A0E1 		mov	r1, r2
 278 01c8 0320A0E1 		mov	r2, r3
 279 01cc 97FFFFEB 		bl	glVertex3v16
1371:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 280              		.loc 1 1371 0
 281 01d0 0CD04BE2 		sub	sp, fp, #12
 282              		@ sp needed
 283 01d4 3048BDE8 		ldmfd	sp!, {r4, r5, fp, lr}
 284 01d8 1EFF2FE1 		bx	lr
 285              	.L18:
 286              		.align	2
 287              	.L17:
 288 01dc 00008045 		.word	1166016512
 289              		.cfi_endproc
 290              	.LFE154:
 292              		.global	__aeabi_f2d
 293              		.global	__aeabi_ddiv
 294              		.global	__aeabi_d2iz
 295              		.align	2
 297              	glRotatef32:
 298              	.LFB155:
1372:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** 
1373:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** GL_STATIC_INL
1374:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** /*! \fn void glRotatef32(float angle, int x, int y, int z)
1375:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \brief Rotate on an arbitrary axis
1376:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \warning FLOAT VERSION!!!! please use glRotatef32i()
1377:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param angle the angle to rotate by
1378:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param x the x component of the axis to rotate on
1379:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param y the y component of the axis to rotate on
1380:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** \param z the z component of the axis to rotate on */
1381:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** void glRotatef32(float angle, int x, int y, int z) {
 299              		.loc 1 1381 0
 300              		.cfi_startproc
 301              		@ Function supports interworking.
 302              		@ args = 0, pretend = 0, frame = 16
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304 01e0 10482DE9 		stmfd	sp!, {r4, fp, lr}
 305              	.LCFI12:
 306              		.cfi_def_cfa_offset 12
 307              		.cfi_offset 4, -12
 308              		.cfi_offset 11, -8
 309              		.cfi_offset 14, -4
 310 01e4 08B08DE2 		add	fp, sp, #8
 311              	.LCFI13:
 312              		.cfi_def_cfa 11, 4
 313 01e8 14D04DE2 		sub	sp, sp, #20
 314 01ec 10000BE5 		str	r0, [fp, #-16]	@ float
 315 01f0 14100BE5 		str	r1, [fp, #-20]
 316 01f4 18200BE5 		str	r2, [fp, #-24]
 317 01f8 1C300BE5 		str	r3, [fp, #-28]
1382:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h ****     glRotatef32i((int)(angle * DEGREES_IN_CIRCLE / 360.0), x, y, z);
 318              		.loc 1 1382 0
 319 01fc 10001BE5 		ldr	r0, [fp, #-16]	@ float
 320 0200 4714A0E3 		mov	r1, #1191182336
 321 0204 FEFFFFEB 		bl	__aeabi_fmul
 322 0208 0030A0E1 		mov	r3, r0
 323 020c 0300A0E1 		mov	r0, r3
 324 0210 FEFFFFEB 		bl	__aeabi_f2d
 325 0214 0030A0E1 		mov	r3, r0
 326 0218 0140A0E1 		mov	r4, r1
 327 021c 0300A0E1 		mov	r0, r3
 328 0220 0410A0E1 		mov	r1, r4
 329 0224 0020A0E3 		mov	r2, #0
 330 0228 38309FE5 		ldr	r3, .L20
 331 022c FEFFFFEB 		bl	__aeabi_ddiv
 332 0230 0030A0E1 		mov	r3, r0
 333 0234 0140A0E1 		mov	r4, r1
 334 0238 0300A0E1 		mov	r0, r3
 335 023c 0410A0E1 		mov	r1, r4
 336 0240 FEFFFFEB 		bl	__aeabi_d2iz
 337 0244 0030A0E1 		mov	r3, r0
 338 0248 0300A0E1 		mov	r0, r3
 339 024c 14101BE5 		ldr	r1, [fp, #-20]
 340 0250 18201BE5 		ldr	r2, [fp, #-24]
 341 0254 1C301BE5 		ldr	r3, [fp, #-28]
 342 0258 FEFFFFEB 		bl	glRotatef32i
1383:/Users/awiebe/devkitPro/libnds/include/nds/arm9/videoGL.h **** }
 343              		.loc 1 1383 0
 344 025c 08D04BE2 		sub	sp, fp, #8
 345              		@ sp needed
 346 0260 1048BDE8 		ldmfd	sp!, {r4, fp, lr}
 347 0264 1EFF2FE1 		bx	lr
 348              	.L21:
 349              		.align	2
 350              	.L20:
 351 0268 00807640 		.word	1081507840
 352              		.cfi_endproc
 353              	.LFE155:
 355              		.section	.rodata
 356              		.align	2
 359              	_ZStL19piecewise_construct:
 360 0000 00       		.space	1
 361              		.section	.text._ZNK9tinyUnity9Transform11getPositionEv,"axG",%progbits,_ZNK9tinyUnity9Transform11g
 362              		.align	2
 363              		.weak	_ZNK9tinyUnity9Transform11getPositionEv
 365              	_ZNK9tinyUnity9Transform11getPositionEv:
 366              	.LFB838:
 367              		.file 2 "../source/tinyUnity/Transform.h"
   1:../source/tinyUnity/Transform.h **** /*
   2:../source/tinyUnity/Transform.h ****  * Transform.h
   3:../source/tinyUnity/Transform.h ****  *
   4:../source/tinyUnity/Transform.h ****  *  Created on: 2013-06-15
   5:../source/tinyUnity/Transform.h ****  *      Author: awiebe
   6:../source/tinyUnity/Transform.h ****  */
   7:../source/tinyUnity/Transform.h **** #include "Vector3.h"
   8:../source/tinyUnity/Transform.h **** #include "physics/Collider.h"
   9:../source/tinyUnity/Transform.h **** #include <vector>
  10:../source/tinyUnity/Transform.h **** 
  11:../source/tinyUnity/Transform.h **** #ifndef TRANSFORM_H_
  12:../source/tinyUnity/Transform.h **** #define TRANSFORM_H_
  13:../source/tinyUnity/Transform.h **** namespace tinyUnity {
  14:../source/tinyUnity/Transform.h **** class Transform
  15:../source/tinyUnity/Transform.h **** {
  16:../source/tinyUnity/Transform.h **** public:
  17:../source/tinyUnity/Transform.h **** 	Transform();
  18:../source/tinyUnity/Transform.h **** 	virtual ~Transform();
  19:../source/tinyUnity/Transform.h **** 	void Translate(Vector3 v);
  20:../source/tinyUnity/Transform.h **** 	void Rotate(Vector3 v);
  21:../source/tinyUnity/Transform.h **** 	void Scale(Vector3 v);
  22:../source/tinyUnity/Transform.h **** 
  23:../source/tinyUnity/Transform.h **** 	/**
  24:../source/tinyUnity/Transform.h **** 	 * Project a Vector3 from local space to world space.
  25:../source/tinyUnity/Transform.h **** 	 */
  26:../source/tinyUnity/Transform.h **** 	Vector3* transformPoint(Vector3* v);
  27:../source/tinyUnity/Transform.h **** 	/**
  28:../source/tinyUnity/Transform.h **** 	 * Project a world space Vector3 to local space.
  29:../source/tinyUnity/Transform.h **** 	 */
  30:../source/tinyUnity/Transform.h **** 	Vector3* inverseTransformPoint(Vector3* v);
  31:../source/tinyUnity/Transform.h **** 
  32:../source/tinyUnity/Transform.h **** 	Collider* getCollider();
  33:../source/tinyUnity/Transform.h **** 	bool needsRedraw();
  34:../source/tinyUnity/Transform.h **** 
  35:../source/tinyUnity/Transform.h **** 	const Vector3* getPosition() const {
 368              		.loc 2 35 0
 369              		.cfi_startproc
 370              		@ Function supports interworking.
 371              		@ args = 0, pretend = 0, frame = 8
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374 0000 04B02DE5 		str	fp, [sp, #-4]!
 375              	.LCFI14:
 376              		.cfi_def_cfa_offset 4
 377              		.cfi_offset 11, -4
 378 0004 00B08DE2 		add	fp, sp, #0
 379              	.LCFI15:
 380              		.cfi_def_cfa_register 11
 381 0008 0CD04DE2 		sub	sp, sp, #12
 382 000c 08000BE5 		str	r0, [fp, #-8]
  36:../source/tinyUnity/Transform.h **** 		return position;
 383              		.loc 2 36 0
 384 0010 08301BE5 		ldr	r3, [fp, #-8]
 385 0014 043093E5 		ldr	r3, [r3, #4]
  37:../source/tinyUnity/Transform.h **** 	}
 386              		.loc 2 37 0
 387 0018 0300A0E1 		mov	r0, r3
 388 001c 00D04BE2 		sub	sp, fp, #0
 389              		@ sp needed
 390 0020 04B09DE4 		ldr	fp, [sp], #4
 391 0024 1EFF2FE1 		bx	lr
 392              		.cfi_endproc
 393              	.LFE838:
 395              		.section	.text._ZNK9tinyUnity9Transform11getRotationEv,"axG",%progbits,_ZNK9tinyUnity9Transform11g
 396              		.align	2
 397              		.weak	_ZNK9tinyUnity9Transform11getRotationEv
 399              	_ZNK9tinyUnity9Transform11getRotationEv:
 400              	.LFB840:
  38:../source/tinyUnity/Transform.h **** 
  39:../source/tinyUnity/Transform.h **** 	void setPosition(Vector3* position) {
  40:../source/tinyUnity/Transform.h **** 		this->position = position;
  41:../source/tinyUnity/Transform.h **** 	}
  42:../source/tinyUnity/Transform.h **** 
  43:../source/tinyUnity/Transform.h **** 	const Vector3* getRotation() const {
 401              		.loc 2 43 0
 402              		.cfi_startproc
 403              		@ Function supports interworking.
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407 0000 04B02DE5 		str	fp, [sp, #-4]!
 408              	.LCFI16:
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 11, -4
 411 0004 00B08DE2 		add	fp, sp, #0
 412              	.LCFI17:
 413              		.cfi_def_cfa_register 11
 414 0008 0CD04DE2 		sub	sp, sp, #12
 415 000c 08000BE5 		str	r0, [fp, #-8]
  44:../source/tinyUnity/Transform.h **** 		return rotation;
 416              		.loc 2 44 0
 417 0010 08301BE5 		ldr	r3, [fp, #-8]
 418 0014 083093E5 		ldr	r3, [r3, #8]
  45:../source/tinyUnity/Transform.h **** 	}
 419              		.loc 2 45 0
 420 0018 0300A0E1 		mov	r0, r3
 421 001c 00D04BE2 		sub	sp, fp, #0
 422              		@ sp needed
 423 0020 04B09DE4 		ldr	fp, [sp], #4
 424 0024 1EFF2FE1 		bx	lr
 425              		.cfi_endproc
 426              	.LFE840:
 428              		.text
 429              		.align	2
 430              		.global	_ZN9tinyUnity6CameraC2Ev
 432              	_ZN9tinyUnity6CameraC2Ev:
 433              	.LFB848:
 434              		.file 3 "../source/tinyUnity/Camera.cpp"
   1:../source/tinyUnity/Camera.cpp **** /*
   2:../source/tinyUnity/Camera.cpp ****  * Camera.cpp
   3:../source/tinyUnity/Camera.cpp ****  *
   4:../source/tinyUnity/Camera.cpp ****  *  Created on: Sep 4, 2014
   5:../source/tinyUnity/Camera.cpp ****  *      Author: awiebe
   6:../source/tinyUnity/Camera.cpp ****  */
   7:../source/tinyUnity/Camera.cpp **** 
   8:../source/tinyUnity/Camera.cpp **** #include "Camera.h"
   9:../source/tinyUnity/Camera.cpp **** 
  10:../source/tinyUnity/Camera.cpp **** namespace tinyUnity {
  11:../source/tinyUnity/Camera.cpp **** 
  12:../source/tinyUnity/Camera.cpp **** Camera::Camera() {
 435              		.loc 3 12 0
 436              		.cfi_startproc
 437              		@ Function supports interworking.
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 026c 00482DE9 		stmfd	sp!, {fp, lr}
 441              	.LCFI18:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 11, -8
 444              		.cfi_offset 14, -4
 445 0270 04B08DE2 		add	fp, sp, #4
 446              	.LCFI19:
 447              		.cfi_def_cfa 11, 4
 448 0274 08D04DE2 		sub	sp, sp, #8
 449 0278 08000BE5 		str	r0, [fp, #-8]
 450              	.LBB2:
 451              		.loc 3 12 0
 452 027c 08301BE5 		ldr	r3, [fp, #-8]
 453 0280 0300A0E1 		mov	r0, r3
 454 0284 FEFFFFEB 		bl	_ZN9tinyUnity9ComponentC2Ev
 455 0288 08301BE5 		ldr	r3, [fp, #-8]
 456 028c 20209FE5 		ldr	r2, .L29
 457 0290 002083E5 		str	r2, [r3]
 458 0294 08301BE5 		ldr	r3, [fp, #-8]
 459 0298 0120A0E3 		mov	r2, #1
 460 029c 0920C3E5 		strb	r2, [r3, #9]
 461              	.LBE2:
  13:../source/tinyUnity/Camera.cpp **** 	// TODO Auto-generated constructor stub
  14:../source/tinyUnity/Camera.cpp **** 
  15:../source/tinyUnity/Camera.cpp **** }
 462              		.loc 3 15 0
 463 02a0 08301BE5 		ldr	r3, [fp, #-8]
 464 02a4 0300A0E1 		mov	r0, r3
 465 02a8 04D04BE2 		sub	sp, fp, #4
 466              		@ sp needed
 467 02ac 0048BDE8 		ldmfd	sp!, {fp, lr}
 468 02b0 1EFF2FE1 		bx	lr
 469              	.L30:
 470              		.align	2
 471              	.L29:
 472 02b4 08000000 		.word	_ZTVN9tinyUnity6CameraE+8
 473              		.cfi_endproc
 474              	.LFE848:
 476              		.global	_ZN9tinyUnity6CameraC1Ev
 477              		.set	_ZN9tinyUnity6CameraC1Ev,_ZN9tinyUnity6CameraC2Ev
 478              		.align	2
 479              		.global	_ZN9tinyUnity6CameraD2Ev
 481              	_ZN9tinyUnity6CameraD2Ev:
 482              	.LFB851:
  16:../source/tinyUnity/Camera.cpp **** 
  17:../source/tinyUnity/Camera.cpp **** Camera::~Camera() {
 483              		.loc 3 17 0
 484              		.cfi_startproc
 485              		@ Function supports interworking.
 486              		@ args = 0, pretend = 0, frame = 8
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 02b8 00482DE9 		stmfd	sp!, {fp, lr}
 489              	.LCFI20:
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 11, -8
 492              		.cfi_offset 14, -4
 493 02bc 04B08DE2 		add	fp, sp, #4
 494              	.LCFI21:
 495              		.cfi_def_cfa 11, 4
 496 02c0 08D04DE2 		sub	sp, sp, #8
 497 02c4 08000BE5 		str	r0, [fp, #-8]
 498              	.LBB3:
 499              		.loc 3 17 0
 500 02c8 08301BE5 		ldr	r3, [fp, #-8]
 501 02cc 34209FE5 		ldr	r2, .L35
 502 02d0 002083E5 		str	r2, [r3]
 503 02d4 08301BE5 		ldr	r3, [fp, #-8]
  18:../source/tinyUnity/Camera.cpp **** 	// TODO Auto-generated destructor stub
  19:../source/tinyUnity/Camera.cpp **** }
 504              		.loc 3 19 0
 505 02d8 0300A0E1 		mov	r0, r3
 506 02dc FEFFFFEB 		bl	_ZN9tinyUnity9ComponentD2Ev
 507              	.LBE3:
 508 02e0 0030A0E3 		mov	r3, #0
 509 02e4 000053E3 		cmp	r3, #0
 510 02e8 0100000A 		beq	.L33
 511              		.loc 3 19 0 is_stmt 0 discriminator 1
 512 02ec 08001BE5 		ldr	r0, [fp, #-8]
 513 02f0 FEFFFFEB 		bl	_ZdlPv
 514              	.L33:
 515              		.loc 3 19 0 discriminator 2
 516 02f4 08301BE5 		ldr	r3, [fp, #-8]
 517 02f8 0300A0E1 		mov	r0, r3
 518 02fc 04D04BE2 		sub	sp, fp, #4
 519              		@ sp needed
 520 0300 0048BDE8 		ldmfd	sp!, {fp, lr}
 521 0304 1EFF2FE1 		bx	lr
 522              	.L36:
 523              		.align	2
 524              	.L35:
 525 0308 08000000 		.word	_ZTVN9tinyUnity6CameraE+8
 526              		.cfi_endproc
 527              	.LFE851:
 529              		.global	_ZN9tinyUnity6CameraD1Ev
 530              		.set	_ZN9tinyUnity6CameraD1Ev,_ZN9tinyUnity6CameraD2Ev
 531              		.align	2
 532              		.global	_ZN9tinyUnity6CameraD0Ev
 534              	_ZN9tinyUnity6CameraD0Ev:
 535              	.LFB853:
  17:../source/tinyUnity/Camera.cpp **** 	// TODO Auto-generated destructor stub
 536              		.loc 3 17 0 is_stmt 1
 537              		.cfi_startproc
 538              		@ Function supports interworking.
 539              		@ args = 0, pretend = 0, frame = 8
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541 030c 00482DE9 		stmfd	sp!, {fp, lr}
 542              	.LCFI22:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 11, -8
 545              		.cfi_offset 14, -4
 546 0310 04B08DE2 		add	fp, sp, #4
 547              	.LCFI23:
 548              		.cfi_def_cfa 11, 4
 549 0314 08D04DE2 		sub	sp, sp, #8
 550 0318 08000BE5 		str	r0, [fp, #-8]
 551              		.loc 3 19 0
 552 031c 08001BE5 		ldr	r0, [fp, #-8]
 553 0320 FEFFFFEB 		bl	_ZN9tinyUnity6CameraD1Ev
 554 0324 08001BE5 		ldr	r0, [fp, #-8]
 555 0328 FEFFFFEB 		bl	_ZdlPv
 556 032c 08301BE5 		ldr	r3, [fp, #-8]
 557 0330 0300A0E1 		mov	r0, r3
 558 0334 04D04BE2 		sub	sp, fp, #4
 559              		@ sp needed
 560 0338 0048BDE8 		ldmfd	sp!, {fp, lr}
 561 033c 1EFF2FE1 		bx	lr
 562              		.cfi_endproc
 563              	.LFE853:
 565              		.global	__aeabi_ui2f
 566              		.align	2
 567              		.global	_ZN9tinyUnity6Camera6renderEv
 569              	_ZN9tinyUnity6Camera6renderEv:
 570              	.LFB854:
  20:../source/tinyUnity/Camera.cpp **** 
  21:../source/tinyUnity/Camera.cpp **** void Camera::render()
  22:../source/tinyUnity/Camera.cpp **** {
 571              		.loc 3 22 0
 572              		.cfi_startproc
 573              		@ Function supports interworking.
 574              		@ args = 0, pretend = 0, frame = 24
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0340 00482DE9 		stmfd	sp!, {fp, lr}
 577              	.LCFI24:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 11, -8
 580              		.cfi_offset 14, -4
 581 0344 04B08DE2 		add	fp, sp, #4
 582              	.LCFI25:
 583              		.cfi_def_cfa 11, 4
 584 0348 18D04DE2 		sub	sp, sp, #24
 585 034c 18000BE5 		str	r0, [fp, #-24]
 586              	.LBB4:
  23:../source/tinyUnity/Camera.cpp **** 	this->getGameObject()->OnPreRender();
 587              		.loc 3 23 0
 588 0350 18301BE5 		ldr	r3, [fp, #-24]
 589 0354 0300A0E1 		mov	r0, r3
 590 0358 FEFFFFEB 		bl	_ZN9tinyUnity9Component13getGameObjectEv
 591 035c 0030A0E1 		mov	r3, r0
 592 0360 0300A0E1 		mov	r0, r3
 593 0364 FEFFFFEB 		bl	_ZN9tinyUnity10GameObject11OnPreRenderEv
  24:../source/tinyUnity/Camera.cpp **** 	renderBackground();
 594              		.loc 3 24 0
 595 0368 18001BE5 		ldr	r0, [fp, #-24]
 596 036c FEFFFFEB 		bl	_ZN9tinyUnity6Camera16renderBackgroundEv
  25:../source/tinyUnity/Camera.cpp **** 	Transform* t = this->getGameObject()->transform;
 597              		.loc 3 25 0
 598 0370 18301BE5 		ldr	r3, [fp, #-24]
 599 0374 0300A0E1 		mov	r0, r3
 600 0378 FEFFFFEB 		bl	_ZN9tinyUnity9Component13getGameObjectEv
 601 037c 0030A0E1 		mov	r3, r0
 602 0380 083093E5 		ldr	r3, [r3, #8]
 603 0384 08300BE5 		str	r3, [fp, #-8]
  26:../source/tinyUnity/Camera.cpp **** 	Vector3* pos = t->getPosition();
 604              		.loc 3 26 0
 605 0388 08001BE5 		ldr	r0, [fp, #-8]
 606 038c FEFFFFEB 		bl	_ZNK9tinyUnity9Transform11getPositionEv
 607 0390 0C000BE5 		str	r0, [fp, #-12]
  27:../source/tinyUnity/Camera.cpp **** 	Vector3* rot = t->getRotation();
 608              		.loc 3 27 0
 609 0394 08001BE5 		ldr	r0, [fp, #-8]
 610 0398 FEFFFFEB 		bl	_ZNK9tinyUnity9Transform11getRotationEv
 611 039c 10000BE5 		str	r0, [fp, #-16]
  28:../source/tinyUnity/Camera.cpp **** 	glTranslatef32(pos->x,pos->y,pos->z);
 612              		.loc 3 28 0
 613 03a0 0C301BE5 		ldr	r3, [fp, #-12]
 614 03a4 043093E5 		ldr	r3, [r3, #4]
 615 03a8 0310A0E1 		mov	r1, r3
 616 03ac 0C301BE5 		ldr	r3, [fp, #-12]
 617 03b0 083093E5 		ldr	r3, [r3, #8]
 618 03b4 0320A0E1 		mov	r2, r3
 619 03b8 0C301BE5 		ldr	r3, [fp, #-12]
 620 03bc 0C3093E5 		ldr	r3, [r3, #12]
 621 03c0 0100A0E1 		mov	r0, r1
 622 03c4 0210A0E1 		mov	r1, r2
 623 03c8 0320A0E1 		mov	r2, r3
 624 03cc 2DFFFFEB 		bl	glTranslatef32
  29:../source/tinyUnity/Camera.cpp **** 	glRotatef32(rot->x,1,0,0);
 625              		.loc 3 29 0
 626 03d0 10301BE5 		ldr	r3, [fp, #-16]
 627 03d4 043093E5 		ldr	r3, [r3, #4]
 628 03d8 0300A0E1 		mov	r0, r3
 629 03dc FEFFFFEB 		bl	__aeabi_ui2f
 630 03e0 0030A0E1 		mov	r3, r0
 631 03e4 0300A0E1 		mov	r0, r3
 632 03e8 0110A0E3 		mov	r1, #1
 633 03ec 0020A0E3 		mov	r2, #0
 634 03f0 0030A0E3 		mov	r3, #0
 635 03f4 79FFFFEB 		bl	glRotatef32
  30:../source/tinyUnity/Camera.cpp **** 	glRotatef32(rot->y,0,1,0);
 636              		.loc 3 30 0
 637 03f8 10301BE5 		ldr	r3, [fp, #-16]
 638 03fc 083093E5 		ldr	r3, [r3, #8]
 639 0400 0300A0E1 		mov	r0, r3
 640 0404 FEFFFFEB 		bl	__aeabi_ui2f
 641 0408 0030A0E1 		mov	r3, r0
 642 040c 0300A0E1 		mov	r0, r3
 643 0410 0010A0E3 		mov	r1, #0
 644 0414 0120A0E3 		mov	r2, #1
 645 0418 0030A0E3 		mov	r3, #0
 646 041c 6FFFFFEB 		bl	glRotatef32
  31:../source/tinyUnity/Camera.cpp **** 	glRotatef32(rot->x,0,0,1);
 647              		.loc 3 31 0
 648 0420 10301BE5 		ldr	r3, [fp, #-16]
 649 0424 043093E5 		ldr	r3, [r3, #4]
 650 0428 0300A0E1 		mov	r0, r3
 651 042c FEFFFFEB 		bl	__aeabi_ui2f
 652 0430 0030A0E1 		mov	r3, r0
 653 0434 0300A0E1 		mov	r0, r3
 654 0438 0010A0E3 		mov	r1, #0
 655 043c 0020A0E3 		mov	r2, #0
 656 0440 0130A0E3 		mov	r3, #1
 657 0444 65FFFFEB 		bl	glRotatef32
  32:../source/tinyUnity/Camera.cpp **** 
  33:../source/tinyUnity/Camera.cpp **** 	this->getGameObject()->OnPostRender();
 658              		.loc 3 33 0
 659 0448 18301BE5 		ldr	r3, [fp, #-24]
 660 044c 0300A0E1 		mov	r0, r3
 661 0450 FEFFFFEB 		bl	_ZN9tinyUnity9Component13getGameObjectEv
 662 0454 0030A0E1 		mov	r3, r0
 663 0458 0300A0E1 		mov	r0, r3
 664 045c FEFFFFEB 		bl	_ZN9tinyUnity10GameObject12OnPostRenderEv
 665              	.LBE4:
  34:../source/tinyUnity/Camera.cpp **** }
 666              		.loc 3 34 0
 667 0460 04D04BE2 		sub	sp, fp, #4
 668              		@ sp needed
 669 0464 0048BDE8 		ldmfd	sp!, {fp, lr}
 670 0468 1EFF2FE1 		bx	lr
 671              		.cfi_endproc
 672              	.LFE854:
 674              		.align	2
 675              		.global	_ZN9tinyUnity6Camera16renderBackgroundEv
 677              	_ZN9tinyUnity6Camera16renderBackgroundEv:
 678              	.LFB855:
  35:../source/tinyUnity/Camera.cpp **** 
  36:../source/tinyUnity/Camera.cpp **** void Camera::renderBackground()
  37:../source/tinyUnity/Camera.cpp **** {
 679              		.loc 3 37 0
 680              		.cfi_startproc
 681              		@ Function supports interworking.
 682              		@ args = 0, pretend = 0, frame = 24
 683              		@ frame_needed = 1, uses_anonymous_args = 0
 684 046c 00482DE9 		stmfd	sp!, {fp, lr}
 685              	.LCFI26:
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0470 04B08DE2 		add	fp, sp, #4
 690              	.LCFI27:
 691              		.cfi_def_cfa 11, 4
 692 0474 18D04DE2 		sub	sp, sp, #24
 693 0478 18000BE5 		str	r0, [fp, #-24]
 694              	.LBB5:
 695              	.LBB6:
  38:../source/tinyUnity/Camera.cpp **** 	switch(this->clearFlags)
 696              		.loc 3 38 0
 697 047c 18301BE5 		ldr	r3, [fp, #-24]
 698 0480 0930D3E5 		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 699 0484 010053E3 		cmp	r3, #1
 700 0488 3600000A 		beq	.L43
 701 048c 020053E3 		cmp	r3, #2
 702 0490 3700000A 		beq	.L51
 703 0494 000053E3 		cmp	r3, #0
 704 0498 0000000A 		beq	.L45
 705              	.LBB7:
  39:../source/tinyUnity/Camera.cpp **** 	{
  40:../source/tinyUnity/Camera.cpp **** 	case Skybox:
  41:../source/tinyUnity/Camera.cpp **** 		//drawSkybox
  42:../source/tinyUnity/Camera.cpp **** 		for(int i=0;i<6;i++)
  43:../source/tinyUnity/Camera.cpp **** 		{
  44:../source/tinyUnity/Camera.cpp **** 			glLoadIdentity();
  45:../source/tinyUnity/Camera.cpp **** 			//Texture2D* t = RenderSettings::skybox->textures[i];
  46:../source/tinyUnity/Camera.cpp **** 
  47:../source/tinyUnity/Camera.cpp **** 			//drawQuad
  48:../source/tinyUnity/Camera.cpp **** 			glBegin(GL_QUAD);
  49:../source/tinyUnity/Camera.cpp **** 
  50:../source/tinyUnity/Camera.cpp **** 			for(int j=0;j<4;j++)
  51:../source/tinyUnity/Camera.cpp **** 			{
  52:../source/tinyUnity/Camera.cpp **** 					unsigned char idx = Camera::SKYBOX_QUADS_INDEX[i][j];
  53:../source/tinyUnity/Camera.cpp **** 					const float* vert =Camera::SKYBOX_QUADS_VERT[idx];
  54:../source/tinyUnity/Camera.cpp **** 					glVertex3f(vert[0],vert[1],vert[2]);
  55:../source/tinyUnity/Camera.cpp **** 			}
  56:../source/tinyUnity/Camera.cpp **** 
  57:../source/tinyUnity/Camera.cpp **** 		}
  58:../source/tinyUnity/Camera.cpp **** 		break;
  59:../source/tinyUnity/Camera.cpp **** 	case Depth:
  60:../source/tinyUnity/Camera.cpp **** 		break;
  61:../source/tinyUnity/Camera.cpp **** 	case SolidColor:
  62:../source/tinyUnity/Camera.cpp **** 		glFlush(0);
  63:../source/tinyUnity/Camera.cpp **** 		break;
  64:../source/tinyUnity/Camera.cpp **** 	case Nothing:
  65:../source/tinyUnity/Camera.cpp **** 	default:
  66:../source/tinyUnity/Camera.cpp **** 		break;// do nothing
 706              		.loc 3 66 0
 707 049c 350000EA 		b	.L41
 708              	.L45:
 709              	.LBB8:
  42:../source/tinyUnity/Camera.cpp **** 		{
 710              		.loc 3 42 0
 711 04a0 0030A0E3 		mov	r3, #0
 712 04a4 08300BE5 		str	r3, [fp, #-8]
 713 04a8 2A0000EA 		b	.L46
 714              	.L49:
 715              	.LBB9:
  44:../source/tinyUnity/Camera.cpp **** 			//Texture2D* t = RenderSettings::skybox->textures[i];
 716              		.loc 3 44 0
 717 04ac 08FFFFEB 		bl	glLoadIdentity
  48:../source/tinyUnity/Camera.cpp **** 
 718              		.loc 3 48 0
 719 04b0 0100A0E3 		mov	r0, #1
 720 04b4 D1FEFFEB 		bl	glBegin
 721              	.LBB10:
  50:../source/tinyUnity/Camera.cpp **** 			{
 722              		.loc 3 50 0
 723 04b8 0030A0E3 		mov	r3, #0
 724 04bc 0C300BE5 		str	r3, [fp, #-12]
 725 04c0 1E0000EA 		b	.L47
 726              	.L48:
 727              	.LBB11:
  52:../source/tinyUnity/Camera.cpp **** 					const float* vert =Camera::SKYBOX_QUADS_VERT[idx];
 728              		.loc 3 52 0 discriminator 2
 729 04c4 B8209FE5 		ldr	r2, .L52
 730 04c8 08301BE5 		ldr	r3, [fp, #-8]
 731 04cc 0311A0E1 		mov	r1, r3, asl #2
 732 04d0 0C301BE5 		ldr	r3, [fp, #-12]
 733 04d4 033081E0 		add	r3, r1, r3
 734 04d8 033082E0 		add	r3, r2, r3
 735 04dc 0030D3E5 		ldrb	r3, [r3]
 736 04e0 0D304BE5 		strb	r3, [fp, #-13]
  53:../source/tinyUnity/Camera.cpp **** 					glVertex3f(vert[0],vert[1],vert[2]);
 737              		.loc 3 53 0 discriminator 2
 738 04e4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 739 04e8 0230A0E1 		mov	r3, r2
 740 04ec 8330A0E1 		mov	r3, r3, asl #1
 741 04f0 023083E0 		add	r3, r3, r2
 742 04f4 0331A0E1 		mov	r3, r3, asl #2
 743 04f8 88209FE5 		ldr	r2, .L52+4
 744 04fc 023083E0 		add	r3, r3, r2
 745 0500 14300BE5 		str	r3, [fp, #-20]
  54:../source/tinyUnity/Camera.cpp **** 			}
 746              		.loc 3 54 0 discriminator 2
 747 0504 14301BE5 		ldr	r3, [fp, #-20]
 748 0508 001093E5 		ldr	r1, [r3]	@ float
 749 050c 14301BE5 		ldr	r3, [fp, #-20]
 750 0510 043083E2 		add	r3, r3, #4
 751 0514 002093E5 		ldr	r2, [r3]	@ float
 752 0518 14301BE5 		ldr	r3, [fp, #-20]
 753 051c 083083E2 		add	r3, r3, #8
 754 0520 003093E5 		ldr	r3, [r3]	@ float
 755 0524 0100A0E1 		mov	r0, r1
 756 0528 0210A0E1 		mov	r1, r2
 757 052c 0320A0E1 		mov	r2, r3
 758 0530 FBFEFFEB 		bl	glVertex3f
 759              	.LBE11:
  50:../source/tinyUnity/Camera.cpp **** 			{
 760              		.loc 3 50 0 discriminator 2
 761 0534 0C301BE5 		ldr	r3, [fp, #-12]
 762 0538 013083E2 		add	r3, r3, #1
 763 053c 0C300BE5 		str	r3, [fp, #-12]
 764              	.L47:
  50:../source/tinyUnity/Camera.cpp **** 			{
 765              		.loc 3 50 0 is_stmt 0 discriminator 1
 766 0540 0C301BE5 		ldr	r3, [fp, #-12]
 767 0544 030053E3 		cmp	r3, #3
 768 0548 DDFFFFDA 		ble	.L48
 769              	.LBE10:
 770              	.LBE9:
  42:../source/tinyUnity/Camera.cpp **** 		{
 771              		.loc 3 42 0 is_stmt 1
 772 054c 08301BE5 		ldr	r3, [fp, #-8]
 773 0550 013083E2 		add	r3, r3, #1
 774 0554 08300BE5 		str	r3, [fp, #-8]
 775              	.L46:
  42:../source/tinyUnity/Camera.cpp **** 		{
 776              		.loc 3 42 0 is_stmt 0 discriminator 1
 777 0558 08301BE5 		ldr	r3, [fp, #-8]
 778 055c 050053E3 		cmp	r3, #5
 779 0560 D1FFFFDA 		ble	.L49
 780              	.LBE8:
  58:../source/tinyUnity/Camera.cpp **** 	case Depth:
 781              		.loc 3 58 0 is_stmt 1
 782 0564 030000EA 		b	.L41
 783              	.L43:
  62:../source/tinyUnity/Camera.cpp **** 		break;
 784              		.loc 3 62 0
 785 0568 0000A0E3 		mov	r0, #0
 786 056c E1FEFFEB 		bl	glFlush
  63:../source/tinyUnity/Camera.cpp **** 	case Nothing:
 787              		.loc 3 63 0
 788 0570 000000EA 		b	.L41
 789              	.L51:
  60:../source/tinyUnity/Camera.cpp **** 	case SolidColor:
 790              		.loc 3 60 0
 791 0574 0000A0E1 		mov	r0, r0	@ nop
 792              	.L41:
 793              	.LBE7:
 794              	.LBE6:
 795              	.LBE5:
  67:../source/tinyUnity/Camera.cpp **** 
  68:../source/tinyUnity/Camera.cpp **** 	}
  69:../source/tinyUnity/Camera.cpp **** }
 796              		.loc 3 69 0
 797 0578 04D04BE2 		sub	sp, fp, #4
 798              		@ sp needed
 799 057c 0048BDE8 		ldmfd	sp!, {fp, lr}
 800 0580 1EFF2FE1 		bx	lr
 801              	.L53:
 802              		.align	2
 803              	.L52:
 804 0584 00000000 		.word	_ZN9tinyUnity6Camera18SKYBOX_QUADS_INDEXE
 805 0588 00000000 		.word	_ZN9tinyUnity6Camera17SKYBOX_QUADS_VERTE
 806              		.cfi_endproc
 807              	.LFE855:
 809              		.global	_ZTVN9tinyUnity6CameraE
 810              		.section	.rodata
 811 0001 00000000 		.align	3
 811      000000
 814              	_ZTVN9tinyUnity6CameraE:
 815 0008 00000000 		.word	0
 816 000c 00000000 		.word	0
 817 0010 00000000 		.word	_ZN9tinyUnity9Component19runScheduledRoutineEi
 818 0014 00000000 		.word	_ZN9tinyUnity6CameraD1Ev
 819 0018 00000000 		.word	_ZN9tinyUnity6CameraD0Ev
 820 001c 00000000 		.text
 821              	.Letext0:
 822              		.file 4 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/machine/_default_types.h"
 823              		.file 5 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/stdint.h"
 824              		.file 6 "/Users/awiebe/devkitPro/libnds/include/nds/ndstypes.h"
 825              		.file 7 "/Users/awiebe/devkitPro/libnds/include/nds/system.h"
 826              		.file 8 "/Users/awiebe/devkitPro/libnds/include/nds/arm9/dynamicArray.h"
 827              		.file 9 "/Users/awiebe/devkitPro/libnds/include/nds/arm9/background.h"
 828              		.file 10 "/Users/awiebe/devkitPro/libnds/include/nds/arm9/sprite.h"
 829              		.file 11 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/type_traits"
 830              		.file 12 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/arm-none-eabi/bits/c++
 831              		.file 13 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/ext/new_allocator.h"
 832              		.file 14 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/ext/numeric_traits.h"
 833              		.file 15 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/bits/cpp_type_traits.h
 834              		.file 16 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/debug/debug.h"
 835              		.file 17 "../source/tinyUnity/Component.h"
 836              		.file 18 "../source/tinyUnity/Camera.h"
 837              		.file 19 "/Users/awiebe/devkitPro/devkitARM/arm-none-eabi/include/c++/4.8.2/bits/stl_pair.h"
 838              		.file 20 "/Users/awiebe/devkitPro/libnds/include/nds/arm9/video.h"
 839              		.file 21 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 Camera.cpp
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:17     .data:00000000 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:20     .data:00000000 _ZL6glGlob
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:23     .text:00000000 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:25     .text:00000000 glBegin
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:55     .text:0000002c $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:59     .text:00000030 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:61     .text:00000030 glVertex3v16
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:102    .text:00000084 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:106    .text:00000088 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:108    .text:00000088 glTranslatef32
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:147    .text:000000d0 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:151    .text:000000d4 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:153    .text:000000d4 glLoadIdentity
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:179    .text:000000f4 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:183    .text:000000f8 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:185    .text:000000f8 glFlush
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:213    .text:00000120 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:219    .text:00000124 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:221    .text:00000124 glVertex3f
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:288    .text:000001dc $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:295    .text:000001e0 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:297    .text:000001e0 glRotatef32
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:351    .text:00000268 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:356    .rodata:00000000 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:359    .rodata:00000000 _ZStL19piecewise_construct
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:362    .text._ZNK9tinyUnity9Transform11getPositionEv:00000000 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:365    .text._ZNK9tinyUnity9Transform11getPositionEv:00000000 _ZNK9tinyUnity9Transform11getPositionEv
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:396    .text._ZNK9tinyUnity9Transform11getRotationEv:00000000 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:399    .text._ZNK9tinyUnity9Transform11getRotationEv:00000000 _ZNK9tinyUnity9Transform11getRotationEv
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:429    .text:0000026c $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:432    .text:0000026c _ZN9tinyUnity6CameraC2Ev
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:472    .text:000002b4 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:814    .rodata:00000008 _ZTVN9tinyUnity6CameraE
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:432    .text:0000026c _ZN9tinyUnity6CameraC1Ev
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:478    .text:000002b8 $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:481    .text:000002b8 _ZN9tinyUnity6CameraD2Ev
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:525    .text:00000308 $d
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:481    .text:000002b8 _ZN9tinyUnity6CameraD1Ev
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:531    .text:0000030c $a
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:534    .text:0000030c _ZN9tinyUnity6CameraD0Ev
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:569    .text:00000340 _ZN9tinyUnity6Camera6renderEv
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:677    .text:0000046c _ZN9tinyUnity6Camera16renderBackgroundEv
/var/folders/0q/0rgskkgj3ms6cdw3tql51gsc0000gv/T//cclArnLk.s:804    .text:00000584 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7940548cbb415e0ae4b2385326857eac
                           .group:00000000 wm4.nds.h.219.3a246e32827d01484c32560cb6386a4e
                           .group:00000000 wm4.libversion.h.2.18bf62264b22c269b0002d03167cd230
                           .group:00000000 wm4.stdint.h.4.659be5aa44c4ab4eb7c7cc2b24d8ceee
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.stdbool.h.29.918586c125f920236001deb211f41e92
                           .group:00000000 wm4.ndstypes.h.43.843a766a29031d4e29a34080490bc9e7
                           .group:00000000 wm4.bios.h.152.378f3b1fd073814d612a1ba3332493e4
                           .group:00000000 wm4.card.h.35.5af8b1d928ff6ee2d22f183e9cc6cbe4
                           .group:00000000 wm4.dma.h.46.470076ab039e7830357de3d6642dfa27
                           .group:00000000 wm4.interrupts.h.36.0043cda252880b023f6c6ebf569dd321
                           .group:00000000 wm4.ipc.h.30.fbcd65cbf2747d2105139787728cf9e6
                           .group:00000000 wm4.memory.h.33.5d65bad382e61a8ebefcc049f5d87b52
                           .group:00000000 wm4.system.h.37.48409549d245f15638a161f782a42fc7
                           .group:00000000 wm4.timers.h.39.4b84c7e880d6307c6b835d087ae7883b
                           .group:00000000 wm4.input.h.26.668c351ed5998cd41b7cf188a22bed7c
                           .group:00000000 wm4.newlib.h.8.30891898d18e8c5555d1f81eacc760e7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.dab33ce643b14ed3207d08fca482d2c9
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.ee8e6917b4e86549ab466905cf65c430
                           .group:00000000 wm4.stddef.h.39.7a7c9736cc6d4c59c817f754af461a43
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.e57d9a24f6f3b6eaa274e44743a335a7
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.stdlib.h.53.a73f7e963d962393b7f9086194931e4a
                           .group:00000000 wm4.cdefs.h.56.862c22ff4fc3f08ba284da94c8439388
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.bfd00fa34c523ce50423876e66a2d374
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.sassert.h.35.09af1094f947be321ad495ba445e020a
                           .group:00000000 wm4.video.h.100.1e8430a318c8dbd537397e7b54f75e06
                           .group:00000000 wm4.background.h.126.e2819423dbec0f01a2c161be17215d1b
                           .group:00000000 wm4.trig_lut.h.31.05e8d4f6471e5776263e413a2d294f89
                           .group:00000000 wm4.math.h.33.ee7a4ca882824fafdd2f17cf66692f53
                           .group:00000000 wm4.videoGL.h.52.c73e1a09c4f988160d4a8ba260f501f7
                           .group:00000000 wm4.exceptions.h.25.52606812c666ab6cfd8bf635c7f2a084
                           .group:00000000 wm4.guitarGrip.h.26.5ddf3818ecb5c8b4af08c800ce313a80
                           .group:00000000 wm4.piano.h.29.f45975aa2219b49eb0380c2585d1f4b5
                           .group:00000000 wm4.rumble.h.29.041709ebb3e71022d49e6e8cd0c3ddfc
                           .group:00000000 wm4.sprite.h.48.d5d68d7969c43c17fbe48e3349c2572c
                           .group:00000000 wm4.cconfig.h.31.c7dcfa542e28bd9698a8d20f88154445
                           .group:00000000 wm4.cconfig.h.434.069089a5f433cea001bd4e8dc11c2229
                           .group:00000000 wm4.exception_defines.h.31.b944334bb23842f2d39bb0d8b467613a
                           .group:00000000 wm4.numeric_traits.h.30.aa01a98564b7e55086aad9e53c7e5c53
                           .group:00000000 wm4.concept_check.h.31.3d579f007de71573a5abea960f72bfb9
                           .group:00000000 wm4.type_traits.30.50c46aa307e7a8ab77156aef79316fff
                           .group:00000000 wm4.move.h.142.423dcca5e718bf1b0a544eb61ae8c60d
                           .group:00000000 wm4.debug.h.30.d58369f6a5680b4507179eb46c141328
                           .group:00000000 wm4.stl_iterator.h.61.8a566d39b117b448087ef185ba94d11c
                           .group:00000000 wm4.stl_algobase.h.495.6cac589b3940118adfc6ef3f8132a921
                           .group:00000000 wm4.atomic_lockfree_defines.h.31.d5c6334fb1e95c9462b052951f1411df
                           .group:00000000 wm4.alloc_traits.h.92.a767d537a24e6ec551b4cadfd08e330c
                           .group:00000000 wm4.functional_hash.h.70.cc33b6cebe8994531b9602e1a54d32b1
                           .group:00000000 wm4.config.h.9.adf03a5a4c6c746d153e41cf03da5d6e

UNDEFINED SYMBOLS
glGlobalData
__aeabi_fmul
__aeabi_f2iz
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
glRotatef32i
_ZN9tinyUnity9ComponentC2Ev
_ZN9tinyUnity9ComponentD2Ev
_ZdlPv
__aeabi_ui2f
_ZN9tinyUnity9Component13getGameObjectEv
_ZN9tinyUnity10GameObject11OnPreRenderEv
_ZN9tinyUnity10GameObject12OnPostRenderEv
_ZN9tinyUnity6Camera18SKYBOX_QUADS_INDEXE
_ZN9tinyUnity6Camera17SKYBOX_QUADS_VERTE
_ZN9tinyUnity9Component19runScheduledRoutineEi
